// Generated by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE


#ifdef _WIN32
    #define _JAVASOFT_JNI_MD_H_

    #define JNIEXPORT __declspec(dllexport)
    #define JNIIMPORT __declspec(dllimport)
    #define JNICALL __stdcall

    typedef int jint;
    typedef long long jlong;
    typedef signed char jbyte;
#elif defined(__GNUC__) && !defined(__ANDROID__)
    #define _JAVASOFT_JNI_MD_H_

    #define JNIEXPORT __attribute__((visibility("default")))
    #define JNIIMPORT
    #define JNICALL

    typedef int jint;
    typedef long long jlong;
    typedef signed char jbyte;
#endif

#include <jni.h>

#ifdef __ANDROID__
    #include <android/log.h>
#elif defined(__APPLE__) && defined(__OBJC__)
    #include <TargetConditionals.h>
    #include <Foundation/Foundation.h>
#endif

#ifdef __linux__
    #include <malloc.h>
    #include <sys/types.h>
    #include <sys/stat.h>
    #include <sys/sysinfo.h>
    #include <fcntl.h>
    #include <unistd.h>
    #include <dlfcn.h>
    #include <link.h>
    #include <pthread.h>
#elif defined(__APPLE__)
    #include <sys/types.h>
    #include <sys/sysctl.h>
    #include <mach/mach_init.h>
    #include <mach/mach_host.h>
    #include <mach/task.h>
    #include <unistd.h>
    #include <dlfcn.h>
    #include <mach-o/dyld.h>
    #include <pthread.h>
#elif defined(_WIN32) && !defined(NO_WINDOWS_H)
    #define NOMINMAX
    #include <windows.h>
    #include <psapi.h>
#elif defined(_WIN32)
    extern "C" unsigned long __stdcall GetCurrentThreadId();
#endif

#if defined(__ANDROID__) || TARGET_OS_IPHONE
    #define NewWeakGlobalRef(obj) NewGlobalRef(obj)
    #define DeleteWeakGlobalRef(obj) DeleteGlobalRef(obj)
#endif

#include <limits.h>
#include <stddef.h>
#ifndef _WIN32
    #include <stdint.h>
#endif
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <exception>
#include <memory>
#include <new>

#define jlong_to_ptr(a) ((void*)(uintptr_t)(a))
#define ptr_to_jlong(a) ((jlong)(uintptr_t)(a))

#if defined(_MSC_VER)
    #define JavaCPP_noinline __declspec(noinline)
    #define JavaCPP_hidden /* hidden by default */
#elif defined(__GNUC__)
    #define JavaCPP_noinline __attribute__((noinline)) __attribute__ ((unused))
    #define JavaCPP_hidden   __attribute__((visibility("hidden"))) __attribute__ ((unused))
#else
    #define JavaCPP_noinline
    #define JavaCPP_hidden
#endif
#if __cplusplus >= 201103L || _MSC_VER >= 1900
    #define JavaCPP_override override
#else
    #define JavaCPP_override
#endif

#include "aria2/aria2.h"

static JavaVM* JavaCPP_vm = NULL;
static bool JavaCPP_haveAllocObject = false;
static bool JavaCPP_haveNonvirtual = false;
static const char* JavaCPP_classNames[32] = {
        "org/bytedeco/javacpp/Pointer",
        "java/lang/String",
        "org/bytedeco/javacpp/Pointer$NativeDeallocator",
        "org/bytedeco/javacpp/Loader",
        "java/nio/Buffer",
        "java/lang/Object",
        "java/nio/charset/Charset",
        "java/lang/NullPointerException",
        "java/lang/RuntimeException",
        "io/github/ssaltedfish/aria2/cpp/A2GidVector$Iterator",
        "io/github/ssaltedfish/aria2/cpp/A2GidVector",
        "org/bytedeco/javacpp/BytePointer",
        "io/github/ssaltedfish/aria2/cpp/BtMetaInfoData",
        "io/github/ssaltedfish/aria2/cpp/StringVectorVector",
        "io/github/ssaltedfish/aria2/cpp/Session",
        "io/github/ssaltedfish/aria2/global/Aria2$DownloadEvent",
        "io/github/ssaltedfish/aria2/cpp/DownloadEventCallback",
        "io/github/ssaltedfish/aria2/cpp/FileData",
        "io/github/ssaltedfish/aria2/cpp/StringStingPairVector",
        "org/bytedeco/javacpp/LongPointer",
        "io/github/ssaltedfish/aria2/cpp/UriData",
        "io/github/ssaltedfish/aria2/cpp/FileDataVector$Iterator",
        "io/github/ssaltedfish/aria2/cpp/FileDataVector",
        "io/github/ssaltedfish/aria2/cpp/GlobalStat",
        "io/github/ssaltedfish/aria2/cpp/SessionConfig",
        "io/github/ssaltedfish/aria2/cpp/StringStingPair",
        "io/github/ssaltedfish/aria2/cpp/StringVector$Iterator",
        "io/github/ssaltedfish/aria2/cpp/StringVector",
        "io/github/ssaltedfish/aria2/cpp/StringVectorVector$Iterator",
        "io/github/ssaltedfish/aria2/cpp/UriDataVector$Iterator",
        "io/github/ssaltedfish/aria2/cpp/UriDataVector",
        "io/github/ssaltedfish/aria2/cpp/DownloadHandle" };
static jclass JavaCPP_classes[32] = { NULL };
static jfieldID JavaCPP_addressFID = NULL;
static jfieldID JavaCPP_positionFID = NULL;
static jfieldID JavaCPP_limitFID = NULL;
static jfieldID JavaCPP_capacityFID = NULL;
static jfieldID JavaCPP_deallocatorFID = NULL;
static jfieldID JavaCPP_ownerAddressFID = NULL;
static jfieldID JavaCPP_booleanValueFID = NULL;
static jfieldID JavaCPP_byteValueFID = NULL;
static jfieldID JavaCPP_shortValueFID = NULL;
static jfieldID JavaCPP_intValueFID = NULL;
static jfieldID JavaCPP_longValueFID = NULL;
static jmethodID JavaCPP_initMID = NULL;
static jmethodID JavaCPP_arrayMID = NULL;
static jmethodID JavaCPP_arrayOffsetMID = NULL;
static jfieldID JavaCPP_bufferPositionFID = NULL;
static jfieldID JavaCPP_bufferLimitFID = NULL;
static jfieldID JavaCPP_bufferCapacityFID = NULL;
static jmethodID JavaCPP_stringMID = NULL;
static jmethodID JavaCPP_getBytesMID = NULL;
static jmethodID JavaCPP_toStringMID = NULL;
#ifdef STRING_BYTES_CHARSET
#ifdef MODIFIED_UTF8_STRING
#pragma message ("warning: STRING_BYTES_CHARSET and MODIFIED_UTF8_STRING are mutually exclusive.")
#endif
static jobject JavaCPP_stringBytesCharset = NULL;
static jmethodID JavaCPP_stringWithCharsetMID = NULL;
static jmethodID JavaCPP_getBytesWithCharsetMID = NULL;
#endif

static inline void JavaCPP_log(const char* fmt, ...) {
    va_list ap;
    va_start(ap, fmt);
#ifdef __ANDROID__
    __android_log_vprint(ANDROID_LOG_ERROR, "javacpp", fmt, ap);
#elif defined(__APPLE__) && defined(__OBJC__)
    NSLogv([NSString stringWithUTF8String:fmt], ap);
#else
    vfprintf(stderr, fmt, ap);
    fprintf(stderr, "\n");
    fflush(stderr);
#endif
    va_end(ap);
}

#if !defined(NO_JNI_DETACH_THREAD) && (defined(__linux__) || defined(__APPLE__))
    static pthread_key_t JavaCPP_current_env;
    static JavaCPP_noinline void JavaCPP_detach_env(void *data) {
        if (JavaCPP_vm) {
            JavaCPP_vm->DetachCurrentThread();
        }
    }
    static JavaCPP_noinline void JavaCPP_create_pthread_key(void) {
        pthread_key_create(&JavaCPP_current_env, JavaCPP_detach_env);
    }
#endif

static JavaCPP_noinline jclass JavaCPP_getClass(JNIEnv* env, int i) {
    if (JavaCPP_classes[i] == NULL && env->PushLocalFrame(1) == 0) {
        jclass cls = env->FindClass(JavaCPP_classNames[i]);
        if (cls == NULL || env->ExceptionCheck()) {
            JavaCPP_log("Error loading class %s.", JavaCPP_classNames[i]);
            return NULL;
        }
        JavaCPP_classes[i] = (jclass)env->NewWeakGlobalRef(cls);
        if (JavaCPP_classes[i] == NULL || env->ExceptionCheck()) {
            JavaCPP_log("Error creating global reference of class %s.", JavaCPP_classNames[i]);
            return NULL;
        }
        env->PopLocalFrame(NULL);
    }
    return JavaCPP_classes[i];
}

static JavaCPP_noinline jfieldID JavaCPP_getFieldID(JNIEnv* env, int i, const char* name, const char* sig) {
    jclass cls = JavaCPP_getClass(env, i);
    if (cls == NULL) {
        return NULL;
    }
    jfieldID fid = env->GetFieldID(cls, name, sig);
    if (fid == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting field ID of %s/%s", JavaCPP_classNames[i], name);
        return NULL;
    }
    return fid;
}

static JavaCPP_noinline jfieldID JavaCPP_getFieldID(JNIEnv* env, const char* clsName, const char* name, const char* sig) {
    jclass cls = env->FindClass(clsName);
    if (cls == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error loading class %s.", clsName);
        return NULL;
    }
    jfieldID fid = env->GetFieldID(cls, name, sig);
    if (fid == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting field ID of %s/%s", clsName, name);
        return NULL;
    }
    return fid;
}

static JavaCPP_noinline jmethodID JavaCPP_getMethodID(JNIEnv* env, int i, const char* name, const char* sig) {
    jclass cls = JavaCPP_getClass(env, i);
    if (cls == NULL) {
        return NULL;
    }
    jmethodID mid = env->GetMethodID(cls, name, sig);
    if (mid == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting method ID of %s/%s", JavaCPP_classNames[i], name);
        return NULL;
    }
    return mid;
}

static JavaCPP_noinline jmethodID JavaCPP_getStaticMethodID(JNIEnv* env, int i, const char* name, const char* sig) {
    jclass cls = JavaCPP_getClass(env, i);
    if (cls == NULL) {
        return NULL;
    }
    jmethodID mid = env->GetStaticMethodID(cls, name, sig);
    if (mid == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting static method ID of %s/%s", JavaCPP_classNames[i], name);
        return NULL;
    }
    return mid;
}

static JavaCPP_noinline jobject JavaCPP_createPointer(JNIEnv* env, int i, jclass cls = NULL) {
    if (cls == NULL && (cls = JavaCPP_getClass(env, i)) == NULL) {
        return NULL;
    }
    if (JavaCPP_haveAllocObject) {
        return env->AllocObject(cls);
    } else {
        jmethodID mid = env->GetMethodID(cls, "<init>", "(Lorg/bytedeco/javacpp/Pointer;)V");
        if (mid == NULL || env->ExceptionCheck()) {
            JavaCPP_log("Error getting Pointer constructor of %s, while VM does not support AllocObject()", JavaCPP_classNames[i]);
            return NULL;
        }
        return env->NewObject(cls, mid, NULL);
    }
}

static JavaCPP_noinline void JavaCPP_initPointer(JNIEnv* env, jobject obj, const void* ptr, jlong size, void* owner, void (*deallocator)(void*)) {
    if (owner != NULL && deallocator != NULL) {
        jvalue args[4];
        args[0].j = ptr_to_jlong(ptr);
        args[1].j = size;
        args[2].j = ptr_to_jlong(owner);
        args[3].j = ptr_to_jlong(deallocator);
        if (JavaCPP_haveNonvirtual) {
            env->CallNonvirtualVoidMethodA(obj, JavaCPP_getClass(env, 0), JavaCPP_initMID, args);
        } else {
            env->CallVoidMethodA(obj, JavaCPP_initMID, args);
        }
    } else {
        env->SetLongField(obj, JavaCPP_addressFID, ptr_to_jlong(ptr));
        env->SetLongField(obj, JavaCPP_limitFID, (jlong)size);
        env->SetLongField(obj, JavaCPP_capacityFID, (jlong)size);
    }
}

#include <string>
static JavaCPP_noinline jstring JavaCPP_createStringFromBytes(JNIEnv* env, const char* ptr, size_t length) {
    if (ptr == NULL) {
        return NULL;
    }
#ifdef MODIFIED_UTF8_STRING
    return env->NewStringUTF(ptr);
#else
    jbyteArray bytes = env->NewByteArray(length < INT_MAX ? length : INT_MAX);
    env->SetByteArrayRegion(bytes, 0, length < INT_MAX ? length : INT_MAX, (signed char*)ptr);
#ifdef STRING_BYTES_CHARSET
    return (jstring)env->NewObject(JavaCPP_getClass(env, 1), JavaCPP_stringWithCharsetMID, bytes, JavaCPP_stringBytesCharset);
#else
    return (jstring)env->NewObject(JavaCPP_getClass(env, 1), JavaCPP_stringMID, bytes);
#endif // STRING_BYTES_CHARSET
#endif // MODIFIED_UTF8_STRING
}

static JavaCPP_noinline jstring JavaCPP_createStringFromBytes(JNIEnv* env, const char* ptr) {
    if (ptr == NULL) {
        return NULL;
    }
    return JavaCPP_createStringFromBytes(env, ptr, std::char_traits<char>::length(ptr));
}

static JavaCPP_noinline jstring JavaCPP_createStringFromUTF16(JNIEnv* env, const unsigned short* ptr, size_t length) {
    if (ptr == NULL) {
        return NULL;
    }
    return env->NewString(ptr, length);
}

static JavaCPP_noinline jstring JavaCPP_createStringFromUTF16(JNIEnv* env, const unsigned short* ptr) {
    if (ptr == NULL) {
        return NULL;
    }
    return JavaCPP_createStringFromUTF16(env, ptr, std::char_traits<unsigned short>::length(ptr));
}

static JavaCPP_noinline const char* JavaCPP_getStringBytes(JNIEnv* env, jstring str) {
    if (str == NULL) {
        return NULL;
    }
#ifdef MODIFIED_UTF8_STRING
    return env->GetStringUTFChars(str, NULL);
#else
#ifdef STRING_BYTES_CHARSET
    jbyteArray bytes = (jbyteArray)env->CallObjectMethod(str, JavaCPP_getBytesWithCharsetMID, JavaCPP_stringBytesCharset);
#else
    jbyteArray bytes = (jbyteArray)env->CallObjectMethod(str, JavaCPP_getBytesMID);
#endif // STRING_BYTES_CHARSET
    if (bytes == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting bytes from string.");
        return NULL;
    }
    jsize length = env->GetArrayLength(bytes);
    signed char* ptr = new (std::nothrow) signed char[length + 1];
    if (ptr != NULL) {
        env->GetByteArrayRegion(bytes, 0, length, ptr);
        ptr[length] = 0;
    }
    return (const char*)ptr;
#endif // MODIFIED_UTF8_STRING
}

static JavaCPP_noinline void JavaCPP_releaseStringBytes(JNIEnv* env, jstring str, const char* ptr) {
#ifdef MODIFIED_UTF8_STRING
    if (str != NULL && ptr != NULL) {
        env->ReleaseStringUTFChars(str, ptr);
    }
#else
    delete[] ptr;
#endif
}

static JavaCPP_noinline const unsigned short* JavaCPP_getStringUTF16(JNIEnv* env, jstring str) {
    if (str == NULL) {
        return NULL;
    }
    const jsize length = env->GetStringLength(str);
    unsigned short* ptr = new (std::nothrow) unsigned short[length + 1];
    if (ptr != NULL) {
        env->GetStringRegion(str, 0, length, ptr);
        ptr[length] = 0;
    }
    return ptr;
}

static JavaCPP_noinline void JavaCPP_releaseStringUTF16(JNIEnv*, const unsigned short* ptr) {
    delete[] ptr;
}

class JavaCPP_hidden JavaCPP_exception : public std::exception {
public:
    JavaCPP_exception(const char* str) throw() {
        if (str == NULL) {
            strcpy(msg, "Unknown exception.");
        } else {
            strncpy(msg, str, sizeof(msg));
            msg[sizeof(msg) - 1] = 0;
        }
    }
    virtual const char* what() const throw() { return msg; }
    char msg[1024];
};

#ifndef GENERIC_EXCEPTION_CLASS
#define GENERIC_EXCEPTION_CLASS std::exception
#endif
#ifndef GENERIC_EXCEPTION_TOSTRING
#define GENERIC_EXCEPTION_TOSTRING what()
#endif
static JavaCPP_noinline jthrowable JavaCPP_handleException(JNIEnv* env, int i) {
    jstring str = NULL;
    try {
        throw;
    } catch (GENERIC_EXCEPTION_CLASS& e) {
        str = JavaCPP_createStringFromBytes(env, e.GENERIC_EXCEPTION_TOSTRING);
    } catch (...) {
        str = JavaCPP_createStringFromBytes(env, "Unknown exception.");
    }
    jmethodID mid = JavaCPP_getMethodID(env, i, "<init>", "(Ljava/lang/String;)V");
    if (mid == NULL) {
        return NULL;
    }
    return (jthrowable)env->NewObject(JavaCPP_getClass(env, i), mid, str);
}

static JavaCPP_noinline void* JavaCPP_getPointerOwner(JNIEnv* env, jobject obj) {
    if (obj != NULL) {
        jobject deallocator = env->GetObjectField(obj, JavaCPP_deallocatorFID);
        if (deallocator != NULL && env->IsInstanceOf(deallocator, JavaCPP_getClass(env, 2))) {
            return jlong_to_ptr(env->GetLongField(deallocator, JavaCPP_ownerAddressFID));
        }
    }
    return NULL;
}

#include <vector>
template<typename P, typename T = P, typename A = std::allocator<T> > class JavaCPP_hidden VectorAdapter {
public:
    VectorAdapter(const P* ptr, typename std::vector<T,A>::size_type size, void* owner) : ptr((P*)ptr), size(size), owner(owner),
        vec2(ptr ? std::vector<T,A>((P*)ptr, (P*)ptr + size) : std::vector<T,A>()), vec(vec2) { }
    VectorAdapter(const std::vector<T,A>& vec) : ptr(0), size(0), owner(0), vec2(vec), vec(vec2) { }
    VectorAdapter(      std::vector<T,A>& vec) : ptr(0), size(0), owner(0), vec(vec) { }
    VectorAdapter(const std::vector<T,A>* vec) : ptr(0), size(0), owner(0), vec(*(std::vector<T,A>*)vec) { }
    void assign(P* ptr, typename std::vector<T,A>::size_type size, void* owner) {
        this->ptr = ptr;
        this->size = size;
        this->owner = owner;
        vec.assign(ptr, ptr + size);
    }
    static void deallocate(void* owner) { operator delete(owner); }
    operator P*() {
        if (vec.size() > size) {
            ptr = (P*)(operator new(sizeof(P) * vec.size(), std::nothrow_t()));
        }
        if (ptr) {
            std::uninitialized_copy(vec.begin(), vec.end(), ptr);
        }
        size = vec.size();
        owner = ptr;
        return ptr;
    }
    operator const P*()        { size = vec.size(); return &vec[0]; }
    operator std::vector<T,A>&() { return vec; }
    operator std::vector<T,A>*() { return ptr ? &vec : 0; }
    P* ptr;
    typename std::vector<T,A>::size_type size;
    void* owner;
    std::vector<T,A> vec2;
    std::vector<T,A>& vec;
};

#include <string>
template<typename T = char> class JavaCPP_hidden StringAdapter {
public:
    StringAdapter(const          char* ptr, typename std::basic_string<T>::size_type size, void* owner) : ptr((T*)ptr), size(size), owner(owner),
        str2(ptr ? (T*)ptr : "", ptr ? (size > 0 ? size : strlen((char*)ptr)) : 0), str(str2) { }
    StringAdapter(const signed   char* ptr, typename std::basic_string<T>::size_type size, void* owner) : ptr((T*)ptr), size(size), owner(owner),
        str2(ptr ? (T*)ptr : "", ptr ? (size > 0 ? size : strlen((char*)ptr)) : 0), str(str2) { }
    StringAdapter(const unsigned char* ptr, typename std::basic_string<T>::size_type size, void* owner) : ptr((T*)ptr), size(size), owner(owner),
        str2(ptr ? (T*)ptr : "", ptr ? (size > 0 ? size : strlen((char*)ptr)) : 0), str(str2) { }
    StringAdapter(const       wchar_t* ptr, typename std::basic_string<T>::size_type size, void* owner) : ptr((T*)ptr), size(size), owner(owner),
        str2(ptr ? (T*)ptr : L"", ptr ? (size > 0 ? size : wcslen((wchar_t*)ptr)) : 0), str(str2) { }
    StringAdapter(const unsigned short* ptr, typename std::basic_string<T>::size_type size, void* owner) : ptr((T*)ptr), size(size), owner(owner),
        str2(ptr ? (T*)ptr : L"", ptr ? (size > 0 ? size : wcslen((wchar_t*)ptr)) : 0), str(str2) { }
    StringAdapter(const   signed   int* ptr, typename std::basic_string<T>::size_type size, void* owner) : ptr((T*)ptr), size(size), owner(owner),
        str2(ptr ? (T*)ptr : L"", ptr ? (size > 0 ? size : wcslen((wchar_t*)ptr)) : 0), str(str2) { }
    StringAdapter(const std::basic_string<T>& str) : ptr(0), size(0), owner(0), str2(str), str(str2) { }
    StringAdapter(      std::basic_string<T>& str) : ptr(0), size(0), owner(0), str(str) { }
    StringAdapter(const std::basic_string<T>* str) : ptr(0), size(0), owner(0), str(*(std::basic_string<T>*)str) { }
    void assign(char* ptr, typename std::basic_string<T>::size_type size, void* owner) {
        this->ptr = ptr;
        this->size = size;
        this->owner = owner;
        str.assign(ptr ? ptr : "", ptr ? (size > 0 ? size : strlen((char*)ptr)) : 0);
    }
    void assign(const          char* ptr, typename std::basic_string<T>::size_type size, void* owner) { assign((char*)ptr, size, owner); }
    void assign(const signed   char* ptr, typename std::basic_string<T>::size_type size, void* owner) { assign((char*)ptr, size, owner); }
    void assign(const unsigned char* ptr, typename std::basic_string<T>::size_type size, void* owner) { assign((char*)ptr, size, owner); }
    void assign(wchar_t* ptr, typename std::basic_string<T>::size_type size, void* owner) {
        this->ptr = ptr;
        this->size = size;
        this->owner = owner;
        str.assign(ptr ? ptr : L"", ptr ? (size > 0 ? size : wcslen((wchar_t*)ptr)) : 0);
    }
    void assign(const        wchar_t* ptr, typename std::basic_string<T>::size_type size, void* owner) { assign((wchar_t*)ptr, size, owner); }
    void assign(const unsigned short* ptr, typename std::basic_string<T>::size_type size, void* owner) { assign((wchar_t*)ptr, size, owner); }
    void assign(const   signed   int* ptr, typename std::basic_string<T>::size_type size, void* owner) { assign((wchar_t*)ptr, size, owner); }
    static void deallocate(void* owner) { delete[] (T*)owner; }
    operator char*() {
        const char* data = str.data();
        if (str.size() > size) {
            ptr = new (std::nothrow) char[str.size()+1];
            if (ptr) memset(ptr, 0, str.size()+1);
        }
        if (ptr && memcmp(ptr, data, str.size()) != 0) {
            memcpy(ptr, data, str.size());
            if (size > str.size()) ptr[str.size()] = 0;
        }
        size = str.size();
        owner = ptr;
        return ptr;
    }
    operator       signed   char*() { return (signed   char*)(operator char*)(); }
    operator       unsigned char*() { return (unsigned char*)(operator char*)(); }
    operator const          char*() { size = str.size(); return                 str.c_str(); }
    operator const signed   char*() { size = str.size(); return (signed   char*)str.c_str(); }
    operator const unsigned char*() { size = str.size(); return (unsigned char*)str.c_str(); }
    operator wchar_t*() {
        const wchar_t* data = str.data();
        if (str.size() > size) {
            ptr = new (std::nothrow) wchar_t[str.size()+1];
            if (ptr) memset(ptr, 0, sizeof(wchar_t) * (str.size()+1));
        }
        if (ptr && memcmp(ptr, data, sizeof(wchar_t) * str.size()) != 0) {
            memcpy(ptr, data, sizeof(wchar_t) * str.size());
            if (size > str.size()) ptr[str.size()] = 0;
        }
        size = str.size();
        owner = ptr;
        return ptr;
    }
    operator     unsigned   short*() { return (unsigned short*)(operator wchar_t*)(); }
    operator       signed     int*() { return (  signed   int*)(operator wchar_t*)(); }
    operator const        wchar_t*() { size = str.size(); return                  str.c_str(); }
    operator const unsigned short*() { size = str.size(); return (unsigned short*)str.c_str(); }
    operator const   signed   int*() { size = str.size(); return (  signed   int*)str.c_str(); }
    operator         std::basic_string<T>&() { return str; }
    operator         std::basic_string<T>*() { return ptr ? &str : 0; }
    T* ptr;
    typename std::basic_string<T>::size_type size;
    void* owner;
    std::basic_string<T> str2;
    std::basic_string<T>& str;
};

template<typename P, typename T = P> class JavaCPP_hidden BasicStringAdapter {
public:
    BasicStringAdapter(const P* ptr, typename std::basic_string<T>::size_type size, void* owner) : str(str2) { assign(const_cast<P*>(ptr), size, owner); }

    BasicStringAdapter(const std::basic_string<T>& str) : size(0), owner(NULL), ptr(NULL), str2(str), str(str2) { }
    BasicStringAdapter(      std::basic_string<T>& str) : size(0), owner(NULL), ptr(NULL), str(str) { }
    BasicStringAdapter(const std::basic_string<T>* str) : size(0), owner(NULL), ptr(NULL), str(*const_cast<std::basic_string<T>*>(str)) { }

    static void deallocate(void* owner) { delete[] static_cast<T*>(owner); }

    operator P*() {
        const T* data = str.data();
        if (str.size() > size) {
            ptr = new (std::nothrow) T[str.size() + 1]();
        }
        if (ptr && memcmp(ptr, data, sizeof(T) * str.size()) != 0) {
            memcpy(ptr, data, sizeof(T) * str.size());
            if (size > str.size()) ptr[str.size()] = 0;
        }
        size = str.size();
        owner = ptr;
        return reinterpret_cast<P*>(ptr);
    }
    operator const P*() {
        size = str.size();
        return reinterpret_cast<const P*>(str.c_str());
    }

    operator std::basic_string<T>&() { return str; }
    operator std::basic_string<T>*() { return ptr ? &str : NULL; }

    void assign(P* ptr, typename std::basic_string<T>::size_type size, void* owner) {
        this->ptr = reinterpret_cast<T*>(ptr);
        this->size = size;
        this->owner = owner;
        if (this->ptr) {
            str.assign(this->ptr, size > 0 ? size : std::char_traits<T>::length(this->ptr));
        } else {
            str.clear();
        }
    }

    typename std::basic_string<T>::size_type size;
    void* owner;

private:
    T* ptr;
    std::basic_string<T> str2;
    std::basic_string<T>& str;
};

#ifdef SHARED_PTR_NAMESPACE
template<class T> class SharedPtrAdapter {
public:
    typedef SHARED_PTR_NAMESPACE::shared_ptr<T> S;
    SharedPtrAdapter(const T* ptr, size_t size, void* owner) : ptr((T*)ptr), size(size), owner(owner),
            sharedPtr2(owner != NULL && owner != ptr ? *(S*)owner : S((T*)ptr)), sharedPtr(sharedPtr2) { }
    SharedPtrAdapter(const S& sharedPtr) : ptr(0), size(0), owner(0), sharedPtr2(sharedPtr), sharedPtr(sharedPtr2) { }
    SharedPtrAdapter(      S& sharedPtr) : ptr(0), size(0), owner(0), sharedPtr(sharedPtr) { }
    SharedPtrAdapter(const S* sharedPtr) : ptr(0), size(0), owner(0), sharedPtr(*(S*)sharedPtr) { }
    void assign(T* ptr, size_t size, void* owner) {
        this->ptr = ptr;
        this->size = size;
        this->owner = owner;
        this->sharedPtr = owner != NULL && owner != ptr ? *(S*)owner : S((T*)ptr);
    }
    static void deallocate(void* owner) { delete (S*)owner; }
    operator typename SHARED_PTR_NAMESPACE::remove_const<T>::type*() {
        ptr = sharedPtr.get();
        if (owner == NULL || owner == ptr) {
            owner = new S(sharedPtr);
        }
        return (typename SHARED_PTR_NAMESPACE::remove_const<T>::type*)ptr;
    }
    operator S&() { return sharedPtr; }
    operator S*() { return &sharedPtr; }
    T* ptr;
    size_t size;
    void* owner;
    S sharedPtr2;
    S& sharedPtr;
};
#endif

#ifdef UNIQUE_PTR_NAMESPACE
template<class T, class D = UNIQUE_PTR_NAMESPACE::default_delete<T> > class UniquePtrAdapter {
public:
    typedef UNIQUE_PTR_NAMESPACE::unique_ptr<T,D> U;
    UniquePtrAdapter(const T* ptr, size_t size, void* owner) : ptr((T*)ptr), size(size), owner(owner),
            uniquePtr2(owner != NULL && owner != ptr ? U() : U((T*)ptr)),
            uniquePtr(owner != NULL && owner != ptr ? *(U*)owner : uniquePtr2) { }
    UniquePtrAdapter(U&& uniquePtr) : ptr(0), size(0), owner(0), uniquePtr2(UNIQUE_PTR_NAMESPACE::move(uniquePtr)), uniquePtr(uniquePtr2) { }
    UniquePtrAdapter(const U& uniquePtr) : ptr(0), size(0), owner(0), uniquePtr2(U(NULL, D())), uniquePtr((U&)uniquePtr) { }
    UniquePtrAdapter(      U& uniquePtr) : ptr(0), size(0), owner(0), uniquePtr2(U(NULL, D())), uniquePtr(uniquePtr) { }
    UniquePtrAdapter(const U* uniquePtr) : ptr(0), size(0), owner(0), uniquePtr2(U(NULL, D())), uniquePtr(*(U*)uniquePtr) { }
    void assign(T* ptr, size_t size, void* owner) {
        this->ptr = ptr;
        this->size = size;
        this->owner = owner;
        this->uniquePtr = owner != NULL && owner != ptr ? *(U*)owner : U((T*)ptr);
    }
    static void deallocate(void* owner) { delete (U*)owner; }
    operator typename UNIQUE_PTR_NAMESPACE::remove_const<T>::type*() {
        ptr = uniquePtr.get();
        if (ptr == uniquePtr2.get() && (owner == NULL || owner == ptr)) {
            // only move the pointer if we actually own it through uniquePtr2
            owner = new U(UNIQUE_PTR_NAMESPACE::move(uniquePtr));
        }
        return (typename UNIQUE_PTR_NAMESPACE::remove_const<T>::type*)ptr;
    }
    operator U&() const { return uniquePtr; }
    operator U&&() { return UNIQUE_PTR_NAMESPACE::move(uniquePtr); }
    operator U*() { return &uniquePtr; }
    T* ptr;
    size_t size;
    void* owner;
    U uniquePtr2;
    U& uniquePtr;
};
#endif

#if __cplusplus >= 201103L || _MSC_VER >= 1900
#include <utility>
template<class T> class MoveAdapter {
public:
    MoveAdapter(const T* ptr, size_t size, void* owner) : ptr(&movedPtr), size(size), owner(owner), movedPtr(std::move(*(T*)ptr)) { }
    MoveAdapter(const T& ptr) : ptr(&movedPtr), size(0), owner(0), movedPtr(std::move((T&)ptr)) { }
    MoveAdapter(T&& ptr) : ptr(&movedPtr), size(0), owner(0), movedPtr((T&&)ptr) { }
    void assign(T* ptr, size_t size, void* owner) {
        this->ptr = &this->movedPtr;
        this->size = size;
        this->owner = owner;
        this->movedPtr = std::move(*ptr);
    }
    static void deallocate(void* owner) { delete (T*)owner; }
    operator T*() {
        ptr = new T(std::move(movedPtr));
        owner = ptr;
        return ptr;
    }
    operator const T*() { return ptr; }
    operator T&&() { return std::move(movedPtr); }
    T* ptr;
    size_t size;
    void* owner;
    T movedPtr;
};
#endif

#if !defined(NO_JNI_DETACH_THREAD) && (defined(__linux__) || defined(__APPLE__))
  static pthread_once_t JavaCPP_once = PTHREAD_ONCE_INIT;
#endif

static JavaCPP_noinline void JavaCPP_detach(bool detach) {
#if !defined(NO_JNI_DETACH_THREAD) && !defined(__linux__) && !defined(__APPLE__)
    if (detach && JavaCPP_vm->DetachCurrentThread() != JNI_OK) {
        JavaCPP_log("Could not detach the JavaVM from the current thread.");
    }
#endif
}

static JavaCPP_noinline bool JavaCPP_getEnv(JNIEnv** env) {
    bool attached = false;
    JavaVM *vm = JavaCPP_vm;
    if (vm == NULL) {
            JavaCPP_log("Could not get any created JavaVM.");
            *env = NULL;
            return false;
    }
#if !defined(NO_JNI_DETACH_THREAD) && (defined(__linux__) || defined(__APPLE__))
    pthread_once(&JavaCPP_once, JavaCPP_create_pthread_key);
    if ((*env = (JNIEnv *)pthread_getspecific(JavaCPP_current_env)) != NULL) {
        attached = true;
        goto done;
    }
#endif
    if (vm->GetEnv((void**)env, JNI_VERSION_1_6) != JNI_OK) {
        struct {
            JNIEnv **env;
            operator JNIEnv**() { return env; } // Android JNI
            operator void**() { return (void**)env; } // standard JNI
        } env2 = { env };
        JavaVMAttachArgs args;
        args.version = JNI_VERSION_1_6;
        args.group = NULL;
        char name[64] = {0};
#ifdef _WIN32
        sprintf(name, "JavaCPP Thread ID %lu", GetCurrentThreadId());
#elif defined(__APPLE__)
        sprintf(name, "JavaCPP Thread ID %u", pthread_mach_thread_np(pthread_self()));
#else
        sprintf(name, "JavaCPP Thread ID %lu", pthread_self());
#endif
        args.name = name;
        if (vm->AttachCurrentThread(env2, &args) != JNI_OK) {
            JavaCPP_log("Could not attach the JavaVM to the current thread.");
            *env = NULL;
            goto done;
        }
#if !defined(NO_JNI_DETACH_THREAD) && (defined(__linux__) || defined(__APPLE__))
        pthread_setspecific(JavaCPP_current_env, *env);
#endif
        attached = true;
    }
    if (JavaCPP_vm == NULL) {
        if (JNI_OnLoad(vm, NULL) < 0) {
            JavaCPP_detach(attached);
            *env = NULL;
            goto done;
        }
    }
done:
    return attached;
}

struct JavaCPP_hidden JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback {
    JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback() : ptr(NULL), obj(NULL) { }
    int operator()(aria2::Session* arg0, ::aria2::DownloadEvent arg1, aria2::A2Gid arg2, void* arg3);
    int (*ptr)(aria2::Session* arg0, ::aria2::DownloadEvent arg1, aria2::A2Gid arg2, void* arg3);
    jobject obj; static jmethodID mid;
};
jmethodID JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback::mid = NULL;


static JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_instances[10];

static void JavaCPP_io_github_ssaltedfish_aria2_cpp_A2GidVector_00024Iterator_deallocate(void *p) { delete (std::vector<A2Gid>::iterator*)p; }
static void JavaCPP_io_github_ssaltedfish_aria2_cpp_A2GidVector_deallocate(void *p) { delete (std::vector<A2Gid>*)p; }
static void JavaCPP_io_github_ssaltedfish_aria2_cpp_BtMetaInfoData_deallocate(void *p) { delete (aria2::BtMetaInfoData*)p; }
static void JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_deallocate(void *p) { 
    int n = sizeof(JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_instances) / sizeof(JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_instances[0]);
    for (int i = 0; i < n; i++) { if (JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_instances[i].obj == ((JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback*)p)->obj) JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_instances[i].obj = NULL; }
    JNIEnv *e; bool a = JavaCPP_getEnv(&e); if (e != NULL) e->DeleteWeakGlobalRef((jweak)((JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback*)p)->obj); delete (JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback*)p; JavaCPP_detach(a); }
static void JavaCPP_io_github_ssaltedfish_aria2_cpp_FileData_deallocate(void *p) { delete (aria2::FileData*)p; }
static void JavaCPP_io_github_ssaltedfish_aria2_cpp_StringStingPairVector_deallocate(void *p) { delete (std::vector<std::pair<std::string,std::string> >*)p; }
static void JavaCPP_io_github_ssaltedfish_aria2_cpp_FileDataVector_00024Iterator_deallocate(void *p) { delete (std::vector<FileData>::iterator*)p; }
static void JavaCPP_io_github_ssaltedfish_aria2_cpp_FileDataVector_deallocate(void *p) { delete (std::vector<FileData>*)p; }
static void JavaCPP_io_github_ssaltedfish_aria2_cpp_GlobalStat_deallocate(void *p) { delete (aria2::GlobalStat*)p; }
static void JavaCPP_io_github_ssaltedfish_aria2_cpp_SessionConfig_deallocate(void *p) { delete (aria2::SessionConfig*)p; }
static void JavaCPP_io_github_ssaltedfish_aria2_cpp_StringStingPair_deallocate(void *p) { delete (std::pair<std::string,std::string>*)p; }
static void JavaCPP_io_github_ssaltedfish_aria2_cpp_StringVector_00024Iterator_deallocate(void *p) { delete (std::vector<std::string>::iterator*)p; }
static void JavaCPP_io_github_ssaltedfish_aria2_cpp_StringVector_deallocate(void *p) { delete (std::vector<std::string>*)p; }
static void JavaCPP_io_github_ssaltedfish_aria2_cpp_StringVectorVector_00024Iterator_deallocate(void *p) { delete (std::vector<std::vector<std::string> >::iterator*)p; }
static void JavaCPP_io_github_ssaltedfish_aria2_cpp_StringVectorVector_deallocate(void *p) { delete (std::vector<std::vector<std::string> >*)p; }
static void JavaCPP_io_github_ssaltedfish_aria2_cpp_UriData_deallocate(void *p) { delete (aria2::UriData*)p; }
static void JavaCPP_io_github_ssaltedfish_aria2_cpp_UriDataVector_00024Iterator_deallocate(void *p) { delete (std::vector<UriData>::iterator*)p; }
static void JavaCPP_io_github_ssaltedfish_aria2_cpp_UriDataVector_deallocate(void *p) { delete (std::vector<UriData>*)p; }
static void JavaCPP_io_github_ssaltedfish_aria2_cpp_BtMetaInfoData_deallocateArray(void* p) { delete[] (aria2::BtMetaInfoData*)p; }
static void JavaCPP_io_github_ssaltedfish_aria2_cpp_FileData_deallocateArray(void* p) { delete[] (aria2::FileData*)p; }
static void JavaCPP_io_github_ssaltedfish_aria2_cpp_GlobalStat_deallocateArray(void* p) { delete[] (aria2::GlobalStat*)p; }
static void JavaCPP_io_github_ssaltedfish_aria2_cpp_SessionConfig_deallocateArray(void* p) { delete[] (aria2::SessionConfig*)p; }
static void JavaCPP_io_github_ssaltedfish_aria2_cpp_UriData_deallocateArray(void* p) { delete[] (aria2::UriData*)p; }

static const char* JavaCPP_members[32][8] = {
        { NULL },
        { NULL },
        { NULL },
        { NULL },
        { NULL },
        { NULL },
        { NULL },
        { NULL },
        { NULL },
        { "sizeof" },
        { "sizeof" },
        { NULL },
        { "sizeof", "name", "comment", "mode", "announceList", "creationDate" },
        { "sizeof" },
        { NULL },
        { NULL },
        { NULL },
        { "sizeof", "index", "length", "path", "selected", "completedLength", "uris" },
        { "sizeof" },
        { NULL },
        { "sizeof", "status", "uri" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof", "downloadSpeed", "uploadSpeed", "numWaiting", "numStopped", "numActive" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" } };
static int JavaCPP_offsets[32][8] = {
        { -1 },
        { -1 },
        { -1 },
        { -1 },
        { -1 },
        { -1 },
        { -1 },
        { -1 },
        { -1 },
        { sizeof(std::vector<A2Gid>::iterator) },
        { sizeof(std::vector<A2Gid>) },
        { -1 },
        { sizeof(aria2::BtMetaInfoData), offsetof(aria2::BtMetaInfoData, name), offsetof(aria2::BtMetaInfoData, comment), offsetof(aria2::BtMetaInfoData, mode), offsetof(aria2::BtMetaInfoData, announceList), offsetof(aria2::BtMetaInfoData, creationDate) },
        { sizeof(std::vector<std::vector<std::string> >) },
        { -1 },
        { -1 },
        { -1 },
        { sizeof(aria2::FileData), offsetof(aria2::FileData, index), offsetof(aria2::FileData, length), offsetof(aria2::FileData, path), offsetof(aria2::FileData, selected), offsetof(aria2::FileData, completedLength), offsetof(aria2::FileData, uris) },
        { sizeof(std::vector<std::pair<std::string,std::string> >) },
        { -1 },
        { sizeof(aria2::UriData), offsetof(aria2::UriData, status), offsetof(aria2::UriData, uri) },
        { sizeof(std::vector<FileData>::iterator) },
        { sizeof(std::vector<FileData>) },
        { sizeof(aria2::GlobalStat), offsetof(aria2::GlobalStat, downloadSpeed), offsetof(aria2::GlobalStat, uploadSpeed), offsetof(aria2::GlobalStat, numWaiting), offsetof(aria2::GlobalStat, numStopped), offsetof(aria2::GlobalStat, numActive) },
        { sizeof(aria2::SessionConfig) },
        { sizeof(std::pair<std::string,std::string>) },
        { sizeof(std::vector<std::string>::iterator) },
        { sizeof(std::vector<std::string>) },
        { sizeof(std::vector<std::vector<std::string> >::iterator) },
        { sizeof(std::vector<UriData>::iterator) },
        { sizeof(std::vector<UriData>) },
        { sizeof(aria2::DownloadHandle) } };
static int JavaCPP_memberOffsetSizes[32] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 1, 1, 1, 1, 7, 1, 1, 3, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 1 };

extern "C" {

JNIEXPORT jint JNICALL JNI_OnLoad_jnijavacpp(JavaVM* vm, void* reserved);
JNIEXPORT void JNICALL JNI_OnUnload_jnijavacpp(JavaVM* vm, void* reserved);

JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void* reserved) {
    if (JNI_OnLoad_jnijavacpp(vm, reserved) == JNI_ERR) {
        return JNI_ERR;
    }
    JNIEnv* env;
    if (vm->GetEnv((void**)&env, JNI_VERSION_1_6) != JNI_OK) {
        JavaCPP_log("Could not get JNIEnv for JNI_VERSION_1_6 inside JNI_OnLoad().");
        return JNI_ERR;
    }
    if (JavaCPP_vm == vm) {
        return env->GetVersion();
    }
    JavaCPP_vm = vm;
    JavaCPP_haveAllocObject = env->functions->AllocObject != NULL;
    JavaCPP_haveNonvirtual = env->functions->CallNonvirtualVoidMethodA != NULL;
    jmethodID putMemberOffsetMID = JavaCPP_getStaticMethodID(env, 3, "putMemberOffset", "(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/Class;");
    if (putMemberOffsetMID == NULL) {
        return JNI_ERR;
    }
    for (int i = 0; i < 32 && !env->ExceptionCheck(); i++) {
        for (int j = 0; j < JavaCPP_memberOffsetSizes[i] && !env->ExceptionCheck(); j++) {
            if (env->PushLocalFrame(3) == 0) {
                jvalue args[3];
                args[0].l = env->NewStringUTF(JavaCPP_classNames[i]);
                args[1].l = JavaCPP_members[i][j] == NULL ? NULL : env->NewStringUTF(JavaCPP_members[i][j]);
                args[2].i = JavaCPP_offsets[i][j];
                jclass cls = (jclass)env->CallStaticObjectMethodA(JavaCPP_getClass(env, 3), putMemberOffsetMID, args);
                if (env->ExceptionCheck()) {
                    JavaCPP_log("Error putting member offsets for class %s.", JavaCPP_classNames[i]);
                    return JNI_ERR;
                }
                JavaCPP_classes[i] = cls == NULL ? NULL : (jclass)env->NewWeakGlobalRef(cls);
                if (env->ExceptionCheck()) {
                    JavaCPP_log("Error creating global reference of class %s.", JavaCPP_classNames[i]);
                    return JNI_ERR;
                }
                env->PopLocalFrame(NULL);
            }
        }
    }
    JavaCPP_addressFID = JavaCPP_getFieldID(env, 0, "address", "J");
    if (JavaCPP_addressFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_positionFID = JavaCPP_getFieldID(env, 0, "position", "J");
    if (JavaCPP_positionFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_limitFID = JavaCPP_getFieldID(env, 0, "limit", "J");
    if (JavaCPP_limitFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_capacityFID = JavaCPP_getFieldID(env, 0, "capacity", "J");
    if (JavaCPP_capacityFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_deallocatorFID = JavaCPP_getFieldID(env, 0, "deallocator", "Lorg/bytedeco/javacpp/Pointer$Deallocator;");
    if (JavaCPP_deallocatorFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_ownerAddressFID = JavaCPP_getFieldID(env, 2, "ownerAddress", "J");
    if (JavaCPP_ownerAddressFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_booleanValueFID = JavaCPP_getFieldID(env, "org/bytedeco/javacpp/tools/Generator$BooleanEnum", "value", "Z");
    if (JavaCPP_booleanValueFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_byteValueFID = JavaCPP_getFieldID(env, "org/bytedeco/javacpp/tools/Generator$ByteEnum", "value", "B");
    if (JavaCPP_byteValueFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_shortValueFID = JavaCPP_getFieldID(env, "org/bytedeco/javacpp/tools/Generator$ShortEnum", "value", "S");
    if (JavaCPP_shortValueFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_intValueFID = JavaCPP_getFieldID(env, "org/bytedeco/javacpp/tools/Generator$IntEnum", "value", "I");
    if (JavaCPP_intValueFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_longValueFID = JavaCPP_getFieldID(env, "org/bytedeco/javacpp/tools/Generator$LongEnum", "value", "J");
    if (JavaCPP_longValueFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_initMID = JavaCPP_getMethodID(env, 0, "init", "(JJJJ)V");
    if (JavaCPP_initMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_arrayMID = JavaCPP_getMethodID(env, 4, "array", "()Ljava/lang/Object;");
    if (JavaCPP_arrayMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_arrayOffsetMID = JavaCPP_getMethodID(env, 4, "arrayOffset", "()I");
    if (JavaCPP_arrayOffsetMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_bufferPositionFID = JavaCPP_getFieldID(env, 4, "position", "I");
    if (JavaCPP_bufferPositionFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_bufferLimitFID = JavaCPP_getFieldID(env, 4, "limit", "I");
    if (JavaCPP_bufferLimitFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_bufferCapacityFID = JavaCPP_getFieldID(env, 4, "capacity", "I");
    if (JavaCPP_bufferCapacityFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_stringMID = JavaCPP_getMethodID(env, 1, "<init>", "([B)V");
    if (JavaCPP_stringMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_getBytesMID = JavaCPP_getMethodID(env, 1, "getBytes", "()[B");
    if (JavaCPP_getBytesMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_toStringMID = JavaCPP_getMethodID(env, 5, "toString", "()Ljava/lang/String;");
    if (JavaCPP_toStringMID == NULL) {
        return JNI_ERR;
    }
#ifdef STRING_BYTES_CHARSET
    jmethodID charsetForNameMID = JavaCPP_getStaticMethodID(env, 6, "forName", "(Ljava/lang/String;)Ljava/nio/charset/Charset;");
    if (charsetForNameMID == NULL) {
        return JNI_ERR;
    }
    jstring charsetName = env->NewStringUTF(STRING_BYTES_CHARSET);
    if (charsetName == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error creating java.lang.String from '%s'", STRING_BYTES_CHARSET);
        return JNI_ERR;
    }
    JavaCPP_stringBytesCharset = env->CallStaticObjectMethod(JavaCPP_getClass(env, 6), charsetForNameMID, charsetName);
    if (JavaCPP_stringBytesCharset == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error when calling Charset.forName() for '%s'", STRING_BYTES_CHARSET);
        return JNI_ERR;
    }
    JavaCPP_stringBytesCharset = env->NewGlobalRef(JavaCPP_stringBytesCharset);
    if (JavaCPP_stringBytesCharset == NULL) {
        JavaCPP_log("Error creating global reference for java.nio.charset.Charset instance");
        return JNI_ERR;
    }
    JavaCPP_stringWithCharsetMID = JavaCPP_getMethodID(env, 1, "<init>", "([BLjava/nio/charset/Charset;)V");
    if (JavaCPP_stringWithCharsetMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_getBytesWithCharsetMID = JavaCPP_getMethodID(env, 1, "getBytes", "(Ljava/nio/charset/Charset;)[B");
    if (JavaCPP_getBytesWithCharsetMID == NULL) {
        return JNI_ERR;
    }
#endif // STRING_BYTES_CHARSET
    return env->GetVersion();
}


JNIEXPORT void JNICALL JNI_OnUnload(JavaVM* vm, void* reserved) {
    JNIEnv* env;
    if (vm->GetEnv((void**)&env, JNI_VERSION_1_6) != JNI_OK) {
        JavaCPP_log("Could not get JNIEnv for JNI_VERSION_1_6 inside JNI_OnUnLoad().");
        return;
    }
    for (int i = 0; i < 32; i++) {
        env->DeleteWeakGlobalRef((jweak)JavaCPP_classes[i]);
        JavaCPP_classes[i] = NULL;
    }
#ifdef STRING_BYTES_CHARSET
    env->DeleteGlobalRef(JavaCPP_stringBytesCharset);
    JavaCPP_stringBytesCharset = NULL;
#endif
    JNI_OnUnload_jnijavacpp(vm, reserved);
    JavaCPP_vm = NULL;
}

JNIEXPORT jlong JNICALL Java_io_github_ssaltedfish_aria2_cpp_A2GidVector_00024Iterator_get(JNIEnv* env, jobject obj) {
    std::vector<A2Gid>::iterator* ptr = (std::vector<A2Gid>::iterator*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rval = ptr->operator *();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_io_github_ssaltedfish_aria2_cpp_A2GidVector_00024Iterator_equals(JNIEnv* env, jobject obj, jobject arg0) {
    std::vector<A2Gid>::iterator* ptr = (std::vector<A2Gid>::iterator*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<A2Gid>::iterator* ptr0 = arg0 == NULL ? NULL : (std::vector<A2Gid>::iterator*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rval = ((*ptr)==(*ptr0));
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_A2GidVector_00024Iterator_increment(JNIEnv* env, jobject obj) {
    std::vector<A2Gid>::iterator* ptr = (std::vector<A2Gid>::iterator*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    std::vector<A2Gid>::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->operator ++();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jlong JNICALL Java_io_github_ssaltedfish_aria2_cpp_A2GidVector_get(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<A2Gid>* ptr = (std::vector<A2Gid>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rval = (*ptr).at((size_t)arg0);
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_A2GidVector_put__JJ(JNIEnv* env, jobject obj, jlong arg0, jlong arg1) {
    std::vector<A2Gid>* ptr = (std::vector<A2Gid>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    jthrowable exc = NULL;
    try {
        (*ptr).at((size_t)arg0) = arg1;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_A2GidVector_put__Lio_github_ssaltedfish_aria2_cpp_A2GidVector_2(JNIEnv* env, jobject obj, jobject arg0) {
    std::vector<A2Gid>* ptr = (std::vector<A2Gid>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<A2Gid>* ptr0 = arg0 == NULL ? NULL : (std::vector<A2Gid>*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    std::vector<A2Gid>* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &((*ptr)=(*ptr0));
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_A2GidVector_begin(JNIEnv* env, jobject obj) {
    std::vector<A2Gid>* ptr = (std::vector<A2Gid>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    std::vector<A2Gid>::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new std::vector<A2Gid>::iterator(ptr->begin());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_io_github_ssaltedfish_aria2_cpp_A2GidVector_00024Iterator_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_A2GidVector_end(JNIEnv* env, jobject obj) {
    std::vector<A2Gid>* ptr = (std::vector<A2Gid>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    std::vector<A2Gid>::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new std::vector<A2Gid>::iterator(ptr->end());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_io_github_ssaltedfish_aria2_cpp_A2GidVector_00024Iterator_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_io_github_ssaltedfish_aria2_cpp_A2GidVector_size(JNIEnv* env, jobject obj) {
    std::vector<A2Gid>* ptr = (std::vector<A2Gid>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rval = ptr->size();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_A2GidVector_erase(JNIEnv* env, jobject obj, jobject arg0) {
    std::vector<A2Gid>* ptr = (std::vector<A2Gid>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<A2Gid>::iterator* ptr0 = arg0 == NULL ? NULL : (std::vector<A2Gid>::iterator*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    std::vector<A2Gid>::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new std::vector<A2Gid>::iterator(ptr->erase(*ptr0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_io_github_ssaltedfish_aria2_cpp_A2GidVector_00024Iterator_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_A2GidVector_insert(JNIEnv* env, jobject obj, jobject arg0, jlong arg1) {
    std::vector<A2Gid>* ptr = (std::vector<A2Gid>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<A2Gid>::iterator* ptr0 = arg0 == NULL ? NULL : (std::vector<A2Gid>::iterator*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    std::vector<A2Gid>::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new std::vector<A2Gid>::iterator(ptr->insert(*ptr0, arg1));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_io_github_ssaltedfish_aria2_cpp_A2GidVector_00024Iterator_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_A2GidVector_resize(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<A2Gid>* ptr = (std::vector<A2Gid>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->resize((size_t)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_A2GidVector_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        std::vector<A2Gid>* rptr = new std::vector<A2Gid>();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_github_ssaltedfish_aria2_cpp_A2GidVector_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_A2GidVector_allocate__J(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        std::vector<A2Gid>* rptr = new std::vector<A2Gid>((size_t)arg0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_github_ssaltedfish_aria2_cpp_A2GidVector_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_BtMetaInfoData_name__(JNIEnv* env, jobject obj) {
    aria2::BtMetaInfoData* ptr = (aria2::BtMetaInfoData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    StringAdapter< char > radapter(ptr->name);
    rptr = radapter;
    jlong rcapacity = (jlong)radapter.size;
    void* rowner = radapter.owner;
    void (*deallocator)(void*) = rowner != NULL ? &StringAdapter< char >::deallocate : 0;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 11);
        if (rarg != NULL) {
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_BtMetaInfoData_name__Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    aria2::BtMetaInfoData* ptr = (aria2::BtMetaInfoData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter< char > adapter0(ptr0, size0, owner0);
    jobject rarg = obj;
    ptr->name = (std::basic_string< char >&)adapter0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_BtMetaInfoData_comment__(JNIEnv* env, jobject obj) {
    aria2::BtMetaInfoData* ptr = (aria2::BtMetaInfoData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    StringAdapter< char > radapter(ptr->comment);
    rptr = radapter;
    jlong rcapacity = (jlong)radapter.size;
    void* rowner = radapter.owner;
    void (*deallocator)(void*) = rowner != NULL ? &StringAdapter< char >::deallocate : 0;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 11);
        if (rarg != NULL) {
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_BtMetaInfoData_comment__Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    aria2::BtMetaInfoData* ptr = (aria2::BtMetaInfoData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter< char > adapter0(ptr0, size0, owner0);
    jobject rarg = obj;
    ptr->comment = (std::basic_string< char >&)adapter0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_cpp_BtMetaInfoData_mode__(JNIEnv* env, jobject obj) {
    aria2::BtMetaInfoData* ptr = (aria2::BtMetaInfoData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    aria2::BtFileMode rval = (aria2::BtFileMode)ptr->mode;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_BtMetaInfoData_mode__I(JNIEnv* env, jobject obj, jint arg0) {
    aria2::BtMetaInfoData* ptr = (aria2::BtMetaInfoData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->mode = (aria2::BtFileMode)arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_BtMetaInfoData_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        aria2::BtMetaInfoData* rptr = new aria2::BtMetaInfoData();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_github_ssaltedfish_aria2_cpp_BtMetaInfoData_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_BtMetaInfoData_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        aria2::BtMetaInfoData* rptr = new aria2::BtMetaInfoData[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_github_ssaltedfish_aria2_cpp_BtMetaInfoData_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_BtMetaInfoData_announceList__(JNIEnv* env, jobject obj) {
    aria2::BtMetaInfoData* ptr = (aria2::BtMetaInfoData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    std::vector<std::vector<std::string> >* rptr;
    rptr = &ptr->announceList;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 13);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_BtMetaInfoData_announceList__Lio_github_ssaltedfish_aria2_cpp_StringVectorVector_2(JNIEnv* env, jobject obj, jobject arg0) {
    aria2::BtMetaInfoData* ptr = (aria2::BtMetaInfoData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<std::vector<std::string> >* ptr0 = arg0 == NULL ? NULL : (std::vector<std::vector<std::string> >*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->announceList = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_BtMetaInfoData_creationDate__Lorg_bytedeco_javacpp_Pointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    aria2::BtMetaInfoData* ptr = (aria2::BtMetaInfoData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->creationDate = *(time_t*)ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_BtMetaInfoData_creationDate__(JNIEnv* env, jobject obj) {
    aria2::BtMetaInfoData* ptr = (aria2::BtMetaInfoData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    time_t* rptr;
    rptr = (time_t*)&ptr->creationDate;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 0);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}

JNIEXPORT int JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_allocate_callback(aria2::Session* arg0, ::aria2::DownloadEvent arg1, aria2::A2Gid arg2, void* arg3) {
    return JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_instances[0](arg0, arg1, arg2, arg3);
}
JNIEXPORT int JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_allocate_callback1(aria2::Session* arg0, ::aria2::DownloadEvent arg1, aria2::A2Gid arg2, void* arg3) {
    return JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_instances[1](arg0, arg1, arg2, arg3);
}
JNIEXPORT int JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_allocate_callback2(aria2::Session* arg0, ::aria2::DownloadEvent arg1, aria2::A2Gid arg2, void* arg3) {
    return JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_instances[2](arg0, arg1, arg2, arg3);
}
JNIEXPORT int JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_allocate_callback3(aria2::Session* arg0, ::aria2::DownloadEvent arg1, aria2::A2Gid arg2, void* arg3) {
    return JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_instances[3](arg0, arg1, arg2, arg3);
}
JNIEXPORT int JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_allocate_callback4(aria2::Session* arg0, ::aria2::DownloadEvent arg1, aria2::A2Gid arg2, void* arg3) {
    return JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_instances[4](arg0, arg1, arg2, arg3);
}
JNIEXPORT int JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_allocate_callback5(aria2::Session* arg0, ::aria2::DownloadEvent arg1, aria2::A2Gid arg2, void* arg3) {
    return JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_instances[5](arg0, arg1, arg2, arg3);
}
JNIEXPORT int JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_allocate_callback6(aria2::Session* arg0, ::aria2::DownloadEvent arg1, aria2::A2Gid arg2, void* arg3) {
    return JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_instances[6](arg0, arg1, arg2, arg3);
}
JNIEXPORT int JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_allocate_callback7(aria2::Session* arg0, ::aria2::DownloadEvent arg1, aria2::A2Gid arg2, void* arg3) {
    return JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_instances[7](arg0, arg1, arg2, arg3);
}
JNIEXPORT int JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_allocate_callback8(aria2::Session* arg0, ::aria2::DownloadEvent arg1, aria2::A2Gid arg2, void* arg3) {
    return JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_instances[8](arg0, arg1, arg2, arg3);
}
JNIEXPORT int JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_allocate_callback9(aria2::Session* arg0, ::aria2::DownloadEvent arg1, aria2::A2Gid arg2, void* arg3) {
    return JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_instances[9](arg0, arg1, arg2, arg3);
}
static int (*JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_allocate_callbacks[10])(aria2::Session* arg0, ::aria2::DownloadEvent arg1, aria2::A2Gid arg2, void* arg3) = {
        JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_allocate_callback,
        JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_allocate_callback1,
        JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_allocate_callback2,
        JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_allocate_callback3,
        JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_allocate_callback4,
        JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_allocate_callback5,
        JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_allocate_callback6,
        JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_allocate_callback7,
        JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_allocate_callback8,
        JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_allocate_callback9 };
int JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback::operator()(aria2::Session* arg0, ::aria2::DownloadEvent arg1, aria2::A2Gid arg2, void* arg3) {
    jint rarg = 0;
    jthrowable exc = NULL;
    JNIEnv* env;
    bool attached = JavaCPP_getEnv(&env);
    if (env == NULL) {
        goto end;
    }
{
    jvalue args[4];
    jobject obj0 = NULL;
    aria2::Session* ptr0 = NULL;
    ptr0 = (aria2::Session*)arg0;
    if (ptr0 != NULL) { 
        obj0 = JavaCPP_createPointer(env, 14);
    }
    if (obj0 != NULL) { 
        env->SetLongField(obj0, JavaCPP_addressFID, ptr_to_jlong(ptr0));
    }
    args[0].l = obj0;
    jobject obj1 = JavaCPP_createPointer(env, 15);
    args[1].l = obj1;
    if (obj1 != NULL) {
        env->SetIntField(obj1, JavaCPP_intValueFID, (jint)arg1);
    }
    args[2].j = (jlong)arg2;
    jobject obj3 = NULL;
    void* ptr3 = NULL;
    ptr3 = (void*)arg3;
    if (ptr3 != NULL) { 
        obj3 = JavaCPP_createPointer(env, 0);
    }
    if (obj3 != NULL) { 
        env->SetLongField(obj3, JavaCPP_addressFID, ptr_to_jlong(ptr3));
    }
    args[3].l = obj3;
    if (obj == NULL) {
        obj = JavaCPP_createPointer(env, 16);
        obj = obj == NULL ? NULL : env->NewGlobalRef(obj);
        if (obj == NULL) {
            JavaCPP_log("Error creating global reference of io.github.ssaltedfish.aria2.cpp.DownloadEventCallback instance for callback.");
        } else {
            env->SetLongField(obj, JavaCPP_addressFID, ptr_to_jlong(this));
        }
        for (int i = 0; i < 10; i++) {
            if (this == &JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_instances[i]) {
                ptr = JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_allocate_callbacks[i];
                break;
            }
        }
    }
    if (mid == NULL) {
        mid = JavaCPP_getMethodID(env, 16, "call", "(Lio/github/ssaltedfish/aria2/cpp/Session;Lio/github/ssaltedfish/aria2/global/Aria2$DownloadEvent;JLorg/bytedeco/javacpp/Pointer;)I");
    }
    if (obj == NULL) {
        JavaCPP_log("Function pointer object is NULL in callback for io.github.ssaltedfish.aria2.cpp.DownloadEventCallback.");
    } else if (mid == NULL) {
        JavaCPP_log("Error getting method ID of function caller \"public native int io.github.ssaltedfish.aria2.cpp.DownloadEventCallback.call(io.github.ssaltedfish.aria2.cpp.Session,io.github.ssaltedfish.aria2.global.Aria2$DownloadEvent,long,org.bytedeco.javacpp.Pointer)\" for callback.");
    } else {
        rarg = env->CallIntMethodA(obj, mid, args);
        if ((exc = env->ExceptionOccurred()) != NULL) {
            env->ExceptionClear();
        }
    }
    env->DeleteLocalRef(obj0);
    env->DeleteLocalRef(obj1);
    env->DeleteLocalRef(obj3);
}
end:
    if (exc != NULL) {
        jstring str = (jstring)env->CallObjectMethod(exc, JavaCPP_toStringMID);
        env->DeleteLocalRef(exc);
        const char *msg = JavaCPP_getStringBytes(env, str);
        JavaCPP_exception e(msg);
        JavaCPP_releaseStringBytes(env, str, msg);
        env->DeleteLocalRef(str);
        JavaCPP_detach(attached);
        throw e;
    } else {
        JavaCPP_detach(attached);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_allocate(JNIEnv* env, jobject obj) {
    obj = env->NewWeakGlobalRef(obj);
    if (obj == NULL) {
        JavaCPP_log("Error creating global reference of io.github.ssaltedfish.aria2.cpp.DownloadEventCallback instance for callback.");
        return;
    }
    JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback* rptr = new (std::nothrow) JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback;
    if (rptr != NULL) {
        rptr->obj = obj;
        JavaCPP_initPointer(env, obj, rptr, 1, rptr, &JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_deallocate);
        for (int i = 0; i < 10; i++) {
            if (JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_instances[i].obj == NULL) {
                rptr->ptr = JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_allocate_callbacks[i];
                JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_instances[i] = *rptr;
                break;
            }
        }
    }
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_call(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jlong arg2, jobject arg3) {
    JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback* ptr = (JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    if (ptr->ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This function pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (arg1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Enum for argument 1 is NULL.");
        return 0;
    }
    ::aria2::DownloadEvent val1 = (::aria2::DownloadEvent)env->GetIntField(arg1, JavaCPP_intValueFID);
    char* ptr3 = arg3 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = (*ptr->ptr)(ptr0, val1, (aria2::A2Gid)arg2, ptr3);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_DownloadHandle_getFile(JNIEnv* env, jobject obj, jint arg0) {
    aria2::DownloadHandle* ptr = (aria2::DownloadHandle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    aria2::FileData* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new aria2::FileData(ptr->getFile(arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_io_github_ssaltedfish_aria2_cpp_FileData_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 17);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_DownloadHandle_getOptions(JNIEnv* env, jobject obj) {
    aria2::DownloadHandle* ptr = (aria2::DownloadHandle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    aria2::KeyVals* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (aria2::KeyVals*)new aria2::KeyVals(ptr->getOptions());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_io_github_ssaltedfish_aria2_cpp_StringStingPairVector_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 18);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_DownloadHandle_getOption__Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    aria2::DownloadHandle* ptr = (aria2::DownloadHandle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter< char > adapter0(ptr0, size0, owner0);
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter< char > radapter(ptr->getOption((std::basic_string< char >&)adapter0));
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = rowner != NULL ? &StringAdapter< char >::deallocate : 0;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 11);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    signed char* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter< char >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jstring JNICALL Java_io_github_ssaltedfish_aria2_cpp_DownloadHandle_getOption__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    aria2::DownloadHandle* ptr = (aria2::DownloadHandle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jlong size0 = 0;
    void* owner0 = (void*)ptr0;
    StringAdapter< char > adapter0(ptr0, size0, owner0);
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter< char > radapter(ptr->getOption((std::basic_string< char >&)adapter0));
        rptr = radapter;
        if (rptr != NULL) {
            rarg = JavaCPP_createStringFromBytes(env, rptr, radapter.size);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_cpp_DownloadHandle_getStatus(JNIEnv* env, jobject obj) {
    aria2::DownloadHandle* ptr = (aria2::DownloadHandle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        aria2::DownloadStatus rval = (aria2::DownloadStatus)ptr->getStatus();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_DownloadHandle_getFiles(JNIEnv* env, jobject obj) {
    aria2::DownloadHandle* ptr = (aria2::DownloadHandle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    aria2::FileData* rptr;
    jthrowable exc = NULL;
    try {
        VectorAdapter< aria2::FileData > radapter(ptr->getFiles());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = rowner != NULL ? &VectorAdapter< aria2::FileData >::deallocate : 0;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 17);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_io_github_ssaltedfish_aria2_cpp_DownloadHandle_getFollowing(JNIEnv* env, jobject obj) {
    aria2::DownloadHandle* ptr = (aria2::DownloadHandle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        aria2::A2Gid rval = (aria2::A2Gid)ptr->getFollowing();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_io_github_ssaltedfish_aria2_cpp_DownloadHandle_getBelongsTo(JNIEnv* env, jobject obj) {
    aria2::DownloadHandle* ptr = (aria2::DownloadHandle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        aria2::A2Gid rval = (aria2::A2Gid)ptr->getBelongsTo();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_DownloadHandle_getDir(JNIEnv* env, jobject obj) {
    aria2::DownloadHandle* ptr = (aria2::DownloadHandle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter< char > radapter(ptr->getDir());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = rowner != NULL ? &StringAdapter< char >::deallocate : 0;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 11);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_cpp_DownloadHandle_getNumFiles(JNIEnv* env, jobject obj) {
    aria2::DownloadHandle* ptr = (aria2::DownloadHandle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->getNumFiles();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_DownloadHandle_getBtMetaInfo(JNIEnv* env, jobject obj) {
    aria2::DownloadHandle* ptr = (aria2::DownloadHandle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    aria2::BtMetaInfoData* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new aria2::BtMetaInfoData(ptr->getBtMetaInfo());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_io_github_ssaltedfish_aria2_cpp_BtMetaInfoData_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 12);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_cpp_DownloadHandle_getDownloadSpeed(JNIEnv* env, jobject obj) {
    aria2::DownloadHandle* ptr = (aria2::DownloadHandle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->getDownloadSpeed();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_cpp_DownloadHandle_getErrorCode(JNIEnv* env, jobject obj) {
    aria2::DownloadHandle* ptr = (aria2::DownloadHandle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->getErrorCode();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_io_github_ssaltedfish_aria2_cpp_DownloadHandle_getCompletedLength(JNIEnv* env, jobject obj) {
    aria2::DownloadHandle* ptr = (aria2::DownloadHandle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        int64_t rval = (int64_t)ptr->getCompletedLength();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_io_github_ssaltedfish_aria2_cpp_DownloadHandle_getTotalLength(JNIEnv* env, jobject obj) {
    aria2::DownloadHandle* ptr = (aria2::DownloadHandle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        int64_t rval = (int64_t)ptr->getTotalLength();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_io_github_ssaltedfish_aria2_cpp_DownloadHandle_getUploadLength(JNIEnv* env, jobject obj) {
    aria2::DownloadHandle* ptr = (aria2::DownloadHandle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        int64_t rval = (int64_t)ptr->getUploadLength();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_DownloadHandle_getBitfield(JNIEnv* env, jobject obj) {
    aria2::DownloadHandle* ptr = (aria2::DownloadHandle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter< char > radapter(ptr->getBitfield());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = rowner != NULL ? &StringAdapter< char >::deallocate : 0;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 11);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_cpp_DownloadHandle_getUploadSpeed(JNIEnv* env, jobject obj) {
    aria2::DownloadHandle* ptr = (aria2::DownloadHandle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->getUploadSpeed();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_io_github_ssaltedfish_aria2_cpp_DownloadHandle_getPieceLength(JNIEnv* env, jobject obj) {
    aria2::DownloadHandle* ptr = (aria2::DownloadHandle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        size_t rval = (size_t)ptr->getPieceLength();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_cpp_DownloadHandle_getNumPieces(JNIEnv* env, jobject obj) {
    aria2::DownloadHandle* ptr = (aria2::DownloadHandle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->getNumPieces();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_cpp_DownloadHandle_getConnections(JNIEnv* env, jobject obj) {
    aria2::DownloadHandle* ptr = (aria2::DownloadHandle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->getConnections();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_DownloadHandle_getInfoHash(JNIEnv* env, jobject obj) {
    aria2::DownloadHandle* ptr = (aria2::DownloadHandle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter< char > radapter(ptr->getInfoHash());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = rowner != NULL ? &StringAdapter< char >::deallocate : 0;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 11);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_DownloadHandle_getFollowedBy(JNIEnv* env, jobject obj) {
    aria2::DownloadHandle* ptr = (aria2::DownloadHandle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    aria2::A2Gid* rptr;
    jthrowable exc = NULL;
    try {
        VectorAdapter< aria2::A2Gid > radapter(ptr->getFollowedBy());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = rowner != NULL ? &VectorAdapter< aria2::A2Gid >::deallocate : 0;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 19);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_cpp_FileData_index__(JNIEnv* env, jobject obj) {
    aria2::FileData* ptr = (aria2::FileData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    int rval = ptr->index;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_FileData_index__I(JNIEnv* env, jobject obj, jint arg0) {
    aria2::FileData* ptr = (aria2::FileData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->index = arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_FileData_length__J(JNIEnv* env, jobject obj, jlong arg0) {
    aria2::FileData* ptr = (aria2::FileData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->length = (int64_t)arg0;
    return rarg;
}
JNIEXPORT jlong JNICALL Java_io_github_ssaltedfish_aria2_cpp_FileData_length__(JNIEnv* env, jobject obj) {
    aria2::FileData* ptr = (aria2::FileData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    int64_t rval = (int64_t)ptr->length;
    rarg = (jlong)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_FileData_path__Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    aria2::FileData* ptr = (aria2::FileData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter< char > adapter0(ptr0, size0, owner0);
    jobject rarg = obj;
    ptr->path = (std::basic_string< char >&)adapter0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_FileData_path__(JNIEnv* env, jobject obj) {
    aria2::FileData* ptr = (aria2::FileData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    StringAdapter< char > radapter(ptr->path);
    rptr = radapter;
    jlong rcapacity = (jlong)radapter.size;
    void* rowner = radapter.owner;
    void (*deallocator)(void*) = rowner != NULL ? &StringAdapter< char >::deallocate : 0;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 11);
        if (rarg != NULL) {
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_FileData_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        aria2::FileData* rptr = new aria2::FileData();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_github_ssaltedfish_aria2_cpp_FileData_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_io_github_ssaltedfish_aria2_cpp_FileData_selected__(JNIEnv* env, jobject obj) {
    aria2::FileData* ptr = (aria2::FileData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->selected;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_FileData_selected__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    aria2::FileData* ptr = (aria2::FileData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->selected = (bool)arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_FileData_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        aria2::FileData* rptr = new aria2::FileData[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_github_ssaltedfish_aria2_cpp_FileData_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jlong JNICALL Java_io_github_ssaltedfish_aria2_cpp_FileData_completedLength__(JNIEnv* env, jobject obj) {
    aria2::FileData* ptr = (aria2::FileData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    int64_t rval = (int64_t)ptr->completedLength;
    rarg = (jlong)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_FileData_completedLength__J(JNIEnv* env, jobject obj, jlong arg0) {
    aria2::FileData* ptr = (aria2::FileData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->completedLength = (int64_t)arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_FileData_uris__Lio_github_ssaltedfish_aria2_cpp_UriData_2(JNIEnv* env, jobject obj, jobject arg0) {
    aria2::FileData* ptr = (aria2::FileData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    aria2::UriData* ptr0 = arg0 == NULL ? NULL : (aria2::UriData*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    VectorAdapter< aria2::UriData > adapter0(ptr0, size0, owner0);
    jobject rarg = obj;
    ptr->uris = adapter0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_FileData_uris__(JNIEnv* env, jobject obj) {
    aria2::FileData* ptr = (aria2::FileData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    aria2::UriData* rptr;
    VectorAdapter< aria2::UriData > radapter(ptr->uris);
    rptr = radapter;
    jlong rcapacity = (jlong)radapter.size;
    void* rowner = radapter.owner;
    void (*deallocator)(void*) = rowner != NULL ? &VectorAdapter< aria2::UriData >::deallocate : 0;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 20);
        if (rarg != NULL) {
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
        }
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_FileDataVector_00024Iterator_get(JNIEnv* env, jobject obj) {
    std::vector<FileData>::iterator* ptr = (std::vector<FileData>::iterator*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    const aria2::FileData* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const aria2::FileData*)&ptr->operator *();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 17);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_io_github_ssaltedfish_aria2_cpp_FileDataVector_00024Iterator_equals(JNIEnv* env, jobject obj, jobject arg0) {
    std::vector<FileData>::iterator* ptr = (std::vector<FileData>::iterator*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<FileData>::iterator* ptr0 = arg0 == NULL ? NULL : (std::vector<FileData>::iterator*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rval = ((*ptr)==(*ptr0));
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_FileDataVector_00024Iterator_increment(JNIEnv* env, jobject obj) {
    std::vector<FileData>::iterator* ptr = (std::vector<FileData>::iterator*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    std::vector<FileData>::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->operator ++();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_FileDataVector_get(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<FileData>* ptr = (std::vector<FileData>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    aria2::FileData* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &(*ptr).at((size_t)arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 17);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_FileDataVector_put__JLio_github_ssaltedfish_aria2_cpp_FileData_2(JNIEnv* env, jobject obj, jlong arg0, jobject arg1) {
    std::vector<FileData>* ptr = (std::vector<FileData>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    aria2::FileData* ptr1 = arg1 == NULL ? NULL : (aria2::FileData*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = obj;
    jthrowable exc = NULL;
    try {
        (*ptr).at((size_t)arg0) = *ptr1;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_FileDataVector_put__Lio_github_ssaltedfish_aria2_cpp_FileDataVector_2(JNIEnv* env, jobject obj, jobject arg0) {
    std::vector<FileData>* ptr = (std::vector<FileData>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<FileData>* ptr0 = arg0 == NULL ? NULL : (std::vector<FileData>*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    std::vector<FileData>* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &((*ptr)=(*ptr0));
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 22);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_FileDataVector_begin(JNIEnv* env, jobject obj) {
    std::vector<FileData>* ptr = (std::vector<FileData>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    std::vector<FileData>::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new std::vector<FileData>::iterator(ptr->begin());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_io_github_ssaltedfish_aria2_cpp_FileDataVector_00024Iterator_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_FileDataVector_end(JNIEnv* env, jobject obj) {
    std::vector<FileData>* ptr = (std::vector<FileData>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    std::vector<FileData>::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new std::vector<FileData>::iterator(ptr->end());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_io_github_ssaltedfish_aria2_cpp_FileDataVector_00024Iterator_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_io_github_ssaltedfish_aria2_cpp_FileDataVector_size(JNIEnv* env, jobject obj) {
    std::vector<FileData>* ptr = (std::vector<FileData>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rval = ptr->size();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_FileDataVector_erase(JNIEnv* env, jobject obj, jobject arg0) {
    std::vector<FileData>* ptr = (std::vector<FileData>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<FileData>::iterator* ptr0 = arg0 == NULL ? NULL : (std::vector<FileData>::iterator*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    std::vector<FileData>::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new std::vector<FileData>::iterator(ptr->erase(*ptr0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_io_github_ssaltedfish_aria2_cpp_FileDataVector_00024Iterator_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_FileDataVector_insert(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    std::vector<FileData>* ptr = (std::vector<FileData>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<FileData>::iterator* ptr0 = arg0 == NULL ? NULL : (std::vector<FileData>::iterator*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    aria2::FileData* ptr1 = arg1 == NULL ? NULL : (aria2::FileData*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    std::vector<FileData>::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new std::vector<FileData>::iterator(ptr->insert(*ptr0, *ptr1));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_io_github_ssaltedfish_aria2_cpp_FileDataVector_00024Iterator_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_FileDataVector_resize(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<FileData>* ptr = (std::vector<FileData>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->resize((size_t)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_FileDataVector_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        std::vector<FileData>* rptr = new std::vector<FileData>();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_github_ssaltedfish_aria2_cpp_FileDataVector_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_FileDataVector_allocate__J(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        std::vector<FileData>* rptr = new std::vector<FileData>((size_t)arg0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_github_ssaltedfish_aria2_cpp_FileDataVector_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_GlobalStat_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        aria2::GlobalStat* rptr = new aria2::GlobalStat();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_github_ssaltedfish_aria2_cpp_GlobalStat_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_GlobalStat_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        aria2::GlobalStat* rptr = new aria2::GlobalStat[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_github_ssaltedfish_aria2_cpp_GlobalStat_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_GlobalStat_downloadSpeed__I(JNIEnv* env, jobject obj, jint arg0) {
    aria2::GlobalStat* ptr = (aria2::GlobalStat*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->downloadSpeed = arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_cpp_GlobalStat_downloadSpeed__(JNIEnv* env, jobject obj) {
    aria2::GlobalStat* ptr = (aria2::GlobalStat*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    int rval = ptr->downloadSpeed;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_GlobalStat_uploadSpeed__I(JNIEnv* env, jobject obj, jint arg0) {
    aria2::GlobalStat* ptr = (aria2::GlobalStat*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->uploadSpeed = arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_cpp_GlobalStat_uploadSpeed__(JNIEnv* env, jobject obj) {
    aria2::GlobalStat* ptr = (aria2::GlobalStat*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    int rval = ptr->uploadSpeed;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_cpp_GlobalStat_numWaiting__(JNIEnv* env, jobject obj) {
    aria2::GlobalStat* ptr = (aria2::GlobalStat*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    int rval = ptr->numWaiting;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_GlobalStat_numWaiting__I(JNIEnv* env, jobject obj, jint arg0) {
    aria2::GlobalStat* ptr = (aria2::GlobalStat*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->numWaiting = arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_GlobalStat_numStopped__I(JNIEnv* env, jobject obj, jint arg0) {
    aria2::GlobalStat* ptr = (aria2::GlobalStat*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->numStopped = arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_cpp_GlobalStat_numStopped__(JNIEnv* env, jobject obj) {
    aria2::GlobalStat* ptr = (aria2::GlobalStat*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    int rval = ptr->numStopped;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_cpp_GlobalStat_numActive__(JNIEnv* env, jobject obj) {
    aria2::GlobalStat* ptr = (aria2::GlobalStat*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    int rval = ptr->numActive;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_GlobalStat_numActive__I(JNIEnv* env, jobject obj, jint arg0) {
    aria2::GlobalStat* ptr = (aria2::GlobalStat*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->numActive = arg0;
    return rarg;
}


JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_SessionConfig_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        aria2::SessionConfig* rptr = new aria2::SessionConfig();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_github_ssaltedfish_aria2_cpp_SessionConfig_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_SessionConfig_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        aria2::SessionConfig* rptr = new aria2::SessionConfig[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_github_ssaltedfish_aria2_cpp_SessionConfig_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_SessionConfig_keepRunning__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    aria2::SessionConfig* ptr = (aria2::SessionConfig*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->keepRunning = (bool)arg0;
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_io_github_ssaltedfish_aria2_cpp_SessionConfig_keepRunning__(JNIEnv* env, jobject obj) {
    aria2::SessionConfig* ptr = (aria2::SessionConfig*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->keepRunning;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_SessionConfig_userData__(JNIEnv* env, jobject obj) {
    aria2::SessionConfig* ptr = (aria2::SessionConfig*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    void* rptr;
    rptr = ptr->userData;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 0);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_SessionConfig_userData__Lorg_bytedeco_javacpp_Pointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    aria2::SessionConfig* ptr = (aria2::SessionConfig*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->userData = ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_SessionConfig_useSignalHandler__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    aria2::SessionConfig* ptr = (aria2::SessionConfig*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->useSignalHandler = (bool)arg0;
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_io_github_ssaltedfish_aria2_cpp_SessionConfig_useSignalHandler__(JNIEnv* env, jobject obj) {
    aria2::SessionConfig* ptr = (aria2::SessionConfig*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->useSignalHandler;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_SessionConfig_downloadEventCallback__(JNIEnv* env, jobject obj) {
    aria2::SessionConfig* ptr = (aria2::SessionConfig*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback* rptr;
    rptr = new (std::nothrow) JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback;
    if (rptr != NULL) rptr->ptr = ptr->downloadEventCallback;
    jlong rcapacity = 1;
    void* rowner = (void*)rptr;
    void (*deallocator)(void*) = &JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback_deallocate;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 16);
        if (rarg != NULL) {
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_SessionConfig_downloadEventCallback__Lio_github_ssaltedfish_aria2_cpp_DownloadEventCallback_2(JNIEnv* env, jobject obj, jobject arg0) {
    aria2::SessionConfig* ptr = (aria2::SessionConfig*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback* ptr0 = arg0 == NULL ? NULL : (JavaCPP_io_github_ssaltedfish_aria2_cpp_DownloadEventCallback*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->downloadEventCallback = (ptr0 == NULL ? NULL : ptr0->ptr);
    return rarg;
}

JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringStingPair_put(JNIEnv* env, jobject obj, jobject arg0) {
    std::pair<std::string,std::string>* ptr = (std::pair<std::string,std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::pair<std::string,std::string>* ptr0 = arg0 == NULL ? NULL : (std::pair<std::string,std::string>*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    std::pair<std::string,std::string>* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &((*ptr)=(*ptr0));
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 25);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringStingPair_first__Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    std::pair<std::string,std::string>* ptr = (std::pair<std::string,std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter< char > adapter0(ptr0, size0, owner0);
    jobject rarg = obj;
    ptr->first = (std::basic_string< char >&)adapter0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringStingPair_first__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    std::pair<std::string,std::string>* ptr = (std::pair<std::string,std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jlong size0 = 0;
    void* owner0 = (void*)ptr0;
    StringAdapter< char > adapter0(ptr0, size0, owner0);
    jobject rarg = obj;
    (*ptr).first = (std::basic_string< char >&)adapter0;
    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringStingPair_first__(JNIEnv* env, jobject obj) {
    std::pair<std::string,std::string>* ptr = (std::pair<std::string,std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    StringAdapter< char > radapter(ptr->first);
    rptr = radapter;
    jlong rcapacity = (jlong)radapter.size;
    void* rowner = radapter.owner;
    void (*deallocator)(void*) = rowner != NULL ? &StringAdapter< char >::deallocate : 0;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 11);
        if (rarg != NULL) {
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringStingPair_second__Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    std::pair<std::string,std::string>* ptr = (std::pair<std::string,std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter< char > adapter0(ptr0, size0, owner0);
    jobject rarg = obj;
    ptr->second = (std::basic_string< char >&)adapter0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringStingPair_second__(JNIEnv* env, jobject obj) {
    std::pair<std::string,std::string>* ptr = (std::pair<std::string,std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    StringAdapter< char > radapter(ptr->second);
    rptr = radapter;
    jlong rcapacity = (jlong)radapter.size;
    void* rowner = radapter.owner;
    void (*deallocator)(void*) = rowner != NULL ? &StringAdapter< char >::deallocate : 0;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 11);
        if (rarg != NULL) {
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringStingPair_second__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    std::pair<std::string,std::string>* ptr = (std::pair<std::string,std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jlong size0 = 0;
    void* owner0 = (void*)ptr0;
    StringAdapter< char > adapter0(ptr0, size0, owner0);
    jobject rarg = obj;
    (*ptr).second = (std::basic_string< char >&)adapter0;
    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    return rarg;
}
JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringStingPair_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        std::pair<std::string,std::string>* rptr = new std::pair<std::string,std::string>();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_github_ssaltedfish_aria2_cpp_StringStingPair_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringStingPairVector_put(JNIEnv* env, jobject obj, jobject arg0) {
    std::vector<std::pair<std::string,std::string> >* ptr = (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<std::pair<std::string,std::string> >* ptr0 = arg0 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    std::vector<std::pair<std::string,std::string> >* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &((*ptr)=(*ptr0));
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 18);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringStingPairVector_size(JNIEnv* env, jobject obj) {
    std::vector<std::pair<std::string,std::string> >* ptr = (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rval = ptr->size();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringStingPairVector_first__JLorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jlong arg0, jobject arg1) {
    std::vector<std::pair<std::string,std::string> >* ptr = (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong size1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_limitFID);
    void* owner1 = JavaCPP_getPointerOwner(env, arg1);
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    size1 -= position1;
    StringAdapter< char > adapter1(ptr1, size1, owner1);
    jobject rarg = obj;
    jthrowable exc = NULL;
    try {
        (*ptr).at((size_t)arg0).first = (std::basic_string< char >&)adapter1;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringStingPairVector_first__JLjava_lang_String_2(JNIEnv* env, jobject obj, jlong arg0, jstring arg1) {
    std::vector<std::pair<std::string,std::string> >* ptr = (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr1 = JavaCPP_getStringBytes(env, arg1);
    jlong size1 = 0;
    void* owner1 = (void*)ptr1;
    StringAdapter< char > adapter1(ptr1, size1, owner1);
    jobject rarg = obj;
    jthrowable exc = NULL;
    try {
        (*ptr).at((size_t)arg0).first = (std::basic_string< char >&)adapter1;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    JavaCPP_releaseStringBytes(env, arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringStingPairVector_first__J(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<std::pair<std::string,std::string> >* ptr = (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter< char > radapter((*ptr).at((size_t)arg0).first);
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = rowner != NULL ? &StringAdapter< char >::deallocate : 0;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 11);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringStingPairVector_second__JLjava_lang_String_2(JNIEnv* env, jobject obj, jlong arg0, jstring arg1) {
    std::vector<std::pair<std::string,std::string> >* ptr = (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr1 = JavaCPP_getStringBytes(env, arg1);
    jlong size1 = 0;
    void* owner1 = (void*)ptr1;
    StringAdapter< char > adapter1(ptr1, size1, owner1);
    jobject rarg = obj;
    jthrowable exc = NULL;
    try {
        (*ptr).at((size_t)arg0).second = (std::basic_string< char >&)adapter1;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    JavaCPP_releaseStringBytes(env, arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringStingPairVector_second__JLorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jlong arg0, jobject arg1) {
    std::vector<std::pair<std::string,std::string> >* ptr = (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong size1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_limitFID);
    void* owner1 = JavaCPP_getPointerOwner(env, arg1);
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    size1 -= position1;
    StringAdapter< char > adapter1(ptr1, size1, owner1);
    jobject rarg = obj;
    jthrowable exc = NULL;
    try {
        (*ptr).at((size_t)arg0).second = (std::basic_string< char >&)adapter1;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringStingPairVector_second__J(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<std::pair<std::string,std::string> >* ptr = (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter< char > radapter((*ptr).at((size_t)arg0).second);
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = rowner != NULL ? &StringAdapter< char >::deallocate : 0;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 11);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringStingPairVector_resize(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<std::pair<std::string,std::string> >* ptr = (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->resize((size_t)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringStingPairVector_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        std::vector<std::pair<std::string,std::string> >* rptr = new std::vector<std::pair<std::string,std::string> >();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_github_ssaltedfish_aria2_cpp_StringStingPairVector_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringStingPairVector_allocate__J(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        std::vector<std::pair<std::string,std::string> >* rptr = new std::vector<std::pair<std::string,std::string> >((size_t)arg0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_github_ssaltedfish_aria2_cpp_StringStingPairVector_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringVector_00024Iterator_get(JNIEnv* env, jobject obj) {
    std::vector<std::string>::iterator* ptr = (std::vector<std::string>::iterator*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter< char > radapter(ptr->operator *());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = rowner != NULL ? &StringAdapter< char >::deallocate : 0;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 11);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringVector_00024Iterator_equals(JNIEnv* env, jobject obj, jobject arg0) {
    std::vector<std::string>::iterator* ptr = (std::vector<std::string>::iterator*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<std::string>::iterator* ptr0 = arg0 == NULL ? NULL : (std::vector<std::string>::iterator*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rval = ((*ptr)==(*ptr0));
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringVector_00024Iterator_increment(JNIEnv* env, jobject obj) {
    std::vector<std::string>::iterator* ptr = (std::vector<std::string>::iterator*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    std::vector<std::string>::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->operator ++();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 26);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringVector_get(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<std::string>* ptr = (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter< char > radapter((*ptr).at((size_t)arg0));
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = rowner != NULL ? &StringAdapter< char >::deallocate : 0;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 11);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringVector_put__JLorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jlong arg0, jobject arg1) {
    std::vector<std::string>* ptr = (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong size1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_limitFID);
    void* owner1 = JavaCPP_getPointerOwner(env, arg1);
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    size1 -= position1;
    StringAdapter< char > adapter1(ptr1, size1, owner1);
    jobject rarg = obj;
    jthrowable exc = NULL;
    try {
        (*ptr).at((size_t)arg0) = (std::basic_string< char >&)adapter1;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringVector_put__JLjava_lang_String_2(JNIEnv* env, jobject obj, jlong arg0, jstring arg1) {
    std::vector<std::string>* ptr = (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr1 = JavaCPP_getStringBytes(env, arg1);
    jlong size1 = 0;
    void* owner1 = (void*)ptr1;
    StringAdapter< char > adapter1(ptr1, size1, owner1);
    jobject rarg = obj;
    jthrowable exc = NULL;
    try {
        (*ptr).at((size_t)arg0) = (std::basic_string< char >&)adapter1;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    JavaCPP_releaseStringBytes(env, arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringVector_put__Lio_github_ssaltedfish_aria2_cpp_StringVector_2(JNIEnv* env, jobject obj, jobject arg0) {
    std::vector<std::string>* ptr = (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<std::string>* ptr0 = arg0 == NULL ? NULL : (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    std::vector<std::string>* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &((*ptr)=(*ptr0));
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 27);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringVector_begin(JNIEnv* env, jobject obj) {
    std::vector<std::string>* ptr = (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    std::vector<std::string>::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new std::vector<std::string>::iterator(ptr->begin());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_io_github_ssaltedfish_aria2_cpp_StringVector_00024Iterator_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 26);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringVector_end(JNIEnv* env, jobject obj) {
    std::vector<std::string>* ptr = (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    std::vector<std::string>::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new std::vector<std::string>::iterator(ptr->end());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_io_github_ssaltedfish_aria2_cpp_StringVector_00024Iterator_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 26);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringVector_size(JNIEnv* env, jobject obj) {
    std::vector<std::string>* ptr = (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rval = ptr->size();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringVector_erase(JNIEnv* env, jobject obj, jobject arg0) {
    std::vector<std::string>* ptr = (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<std::string>::iterator* ptr0 = arg0 == NULL ? NULL : (std::vector<std::string>::iterator*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    std::vector<std::string>::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new std::vector<std::string>::iterator(ptr->erase(*ptr0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_io_github_ssaltedfish_aria2_cpp_StringVector_00024Iterator_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 26);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringVector_insert(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    std::vector<std::string>* ptr = (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<std::string>::iterator* ptr0 = arg0 == NULL ? NULL : (std::vector<std::string>::iterator*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong size1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_limitFID);
    void* owner1 = JavaCPP_getPointerOwner(env, arg1);
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    size1 -= position1;
    StringAdapter< char > adapter1(ptr1, size1, owner1);
    jobject rarg = NULL;
    std::vector<std::string>::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new std::vector<std::string>::iterator(ptr->insert(*ptr0, (std::basic_string< char >&)adapter1));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_io_github_ssaltedfish_aria2_cpp_StringVector_00024Iterator_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 26);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    signed char* rptr1 = adapter1;
    jlong rsize1 = (jlong)adapter1.size;
    void* rowner1 = adapter1.owner;
    if (rptr1 != ptr1) {
        JavaCPP_initPointer(env, arg1, rptr1, rsize1, rowner1, &StringAdapter< char >::deallocate);
    } else {
        env->SetLongField(arg1, JavaCPP_limitFID, rsize1 + position1);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringVector_resize(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<std::string>* ptr = (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->resize((size_t)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringVector_allocate__J(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        std::vector<std::string>* rptr = new std::vector<std::string>((size_t)arg0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_github_ssaltedfish_aria2_cpp_StringVector_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringVector_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        std::vector<std::string>* rptr = new std::vector<std::string>();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_github_ssaltedfish_aria2_cpp_StringVector_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringVectorVector_00024Iterator_get(JNIEnv* env, jobject obj) {
    std::vector<std::vector<std::string> >::iterator* ptr = (std::vector<std::vector<std::string> >::iterator*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    const std::vector<std::string>* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const std::vector<std::string>*)&ptr->operator *();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 27);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringVectorVector_00024Iterator_equals(JNIEnv* env, jobject obj, jobject arg0) {
    std::vector<std::vector<std::string> >::iterator* ptr = (std::vector<std::vector<std::string> >::iterator*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<std::vector<std::string> >::iterator* ptr0 = arg0 == NULL ? NULL : (std::vector<std::vector<std::string> >::iterator*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rval = ((*ptr)==(*ptr0));
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringVectorVector_00024Iterator_increment(JNIEnv* env, jobject obj) {
    std::vector<std::vector<std::string> >::iterator* ptr = (std::vector<std::vector<std::string> >::iterator*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    std::vector<std::vector<std::string> >::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->operator ++();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 28);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringVectorVector_get(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<std::vector<std::string> >* ptr = (std::vector<std::vector<std::string> >*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    std::vector<std::string>* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &(*ptr).at((size_t)arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 27);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringVectorVector_put__JLio_github_ssaltedfish_aria2_cpp_StringVector_2(JNIEnv* env, jobject obj, jlong arg0, jobject arg1) {
    std::vector<std::vector<std::string> >* ptr = (std::vector<std::vector<std::string> >*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<std::string>* ptr1 = arg1 == NULL ? NULL : (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = obj;
    jthrowable exc = NULL;
    try {
        (*ptr).at((size_t)arg0) = *ptr1;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringVectorVector_put__Lio_github_ssaltedfish_aria2_cpp_StringVectorVector_2(JNIEnv* env, jobject obj, jobject arg0) {
    std::vector<std::vector<std::string> >* ptr = (std::vector<std::vector<std::string> >*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<std::vector<std::string> >* ptr0 = arg0 == NULL ? NULL : (std::vector<std::vector<std::string> >*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    std::vector<std::vector<std::string> >* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &((*ptr)=(*ptr0));
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 13);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringVectorVector_begin(JNIEnv* env, jobject obj) {
    std::vector<std::vector<std::string> >* ptr = (std::vector<std::vector<std::string> >*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    std::vector<std::vector<std::string> >::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new std::vector<std::vector<std::string> >::iterator(ptr->begin());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_io_github_ssaltedfish_aria2_cpp_StringVectorVector_00024Iterator_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 28);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringVectorVector_end(JNIEnv* env, jobject obj) {
    std::vector<std::vector<std::string> >* ptr = (std::vector<std::vector<std::string> >*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    std::vector<std::vector<std::string> >::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new std::vector<std::vector<std::string> >::iterator(ptr->end());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_io_github_ssaltedfish_aria2_cpp_StringVectorVector_00024Iterator_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 28);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringVectorVector_size(JNIEnv* env, jobject obj) {
    std::vector<std::vector<std::string> >* ptr = (std::vector<std::vector<std::string> >*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rval = ptr->size();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringVectorVector_erase(JNIEnv* env, jobject obj, jobject arg0) {
    std::vector<std::vector<std::string> >* ptr = (std::vector<std::vector<std::string> >*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<std::vector<std::string> >::iterator* ptr0 = arg0 == NULL ? NULL : (std::vector<std::vector<std::string> >::iterator*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    std::vector<std::vector<std::string> >::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new std::vector<std::vector<std::string> >::iterator(ptr->erase(*ptr0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_io_github_ssaltedfish_aria2_cpp_StringVectorVector_00024Iterator_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 28);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringVectorVector_insert(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    std::vector<std::vector<std::string> >* ptr = (std::vector<std::vector<std::string> >*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<std::vector<std::string> >::iterator* ptr0 = arg0 == NULL ? NULL : (std::vector<std::vector<std::string> >::iterator*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    std::vector<std::string>* ptr1 = arg1 == NULL ? NULL : (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    std::vector<std::vector<std::string> >::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new std::vector<std::vector<std::string> >::iterator(ptr->insert(*ptr0, *ptr1));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_io_github_ssaltedfish_aria2_cpp_StringVectorVector_00024Iterator_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 28);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringVectorVector_resize(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<std::vector<std::string> >* ptr = (std::vector<std::vector<std::string> >*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->resize((size_t)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringVectorVector_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        std::vector<std::vector<std::string> >* rptr = new std::vector<std::vector<std::string> >();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_github_ssaltedfish_aria2_cpp_StringVectorVector_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_StringVectorVector_allocate__J(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        std::vector<std::vector<std::string> >* rptr = new std::vector<std::vector<std::string> >((size_t)arg0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_github_ssaltedfish_aria2_cpp_StringVectorVector_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_UriData_status__I(JNIEnv* env, jobject obj, jint arg0) {
    aria2::UriData* ptr = (aria2::UriData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->status = (aria2::UriStatus)arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_cpp_UriData_status__(JNIEnv* env, jobject obj) {
    aria2::UriData* ptr = (aria2::UriData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    aria2::UriStatus rval = (aria2::UriStatus)ptr->status;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_UriData_uri__(JNIEnv* env, jobject obj) {
    aria2::UriData* ptr = (aria2::UriData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    StringAdapter< char > radapter(ptr->uri);
    rptr = radapter;
    jlong rcapacity = (jlong)radapter.size;
    void* rowner = radapter.owner;
    void (*deallocator)(void*) = rowner != NULL ? &StringAdapter< char >::deallocate : 0;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 11);
        if (rarg != NULL) {
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_UriData_uri__Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    aria2::UriData* ptr = (aria2::UriData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter< char > adapter0(ptr0, size0, owner0);
    jobject rarg = obj;
    ptr->uri = (std::basic_string< char >&)adapter0;
    return rarg;
}
JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_UriData_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        aria2::UriData* rptr = new aria2::UriData();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_github_ssaltedfish_aria2_cpp_UriData_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_UriData_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        aria2::UriData* rptr = new aria2::UriData[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_github_ssaltedfish_aria2_cpp_UriData_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_UriDataVector_00024Iterator_get(JNIEnv* env, jobject obj) {
    std::vector<UriData>::iterator* ptr = (std::vector<UriData>::iterator*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    const aria2::UriData* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const aria2::UriData*)&ptr->operator *();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 20);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_io_github_ssaltedfish_aria2_cpp_UriDataVector_00024Iterator_equals(JNIEnv* env, jobject obj, jobject arg0) {
    std::vector<UriData>::iterator* ptr = (std::vector<UriData>::iterator*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<UriData>::iterator* ptr0 = arg0 == NULL ? NULL : (std::vector<UriData>::iterator*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rval = ((*ptr)==(*ptr0));
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_UriDataVector_00024Iterator_increment(JNIEnv* env, jobject obj) {
    std::vector<UriData>::iterator* ptr = (std::vector<UriData>::iterator*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    std::vector<UriData>::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->operator ++();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 29);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_UriDataVector_get(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<UriData>* ptr = (std::vector<UriData>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    aria2::UriData* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &(*ptr).at((size_t)arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 20);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_UriDataVector_put__JLio_github_ssaltedfish_aria2_cpp_UriData_2(JNIEnv* env, jobject obj, jlong arg0, jobject arg1) {
    std::vector<UriData>* ptr = (std::vector<UriData>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    aria2::UriData* ptr1 = arg1 == NULL ? NULL : (aria2::UriData*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = obj;
    jthrowable exc = NULL;
    try {
        (*ptr).at((size_t)arg0) = *ptr1;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_UriDataVector_put__Lio_github_ssaltedfish_aria2_cpp_UriDataVector_2(JNIEnv* env, jobject obj, jobject arg0) {
    std::vector<UriData>* ptr = (std::vector<UriData>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<UriData>* ptr0 = arg0 == NULL ? NULL : (std::vector<UriData>*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    std::vector<UriData>* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &((*ptr)=(*ptr0));
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_UriDataVector_begin(JNIEnv* env, jobject obj) {
    std::vector<UriData>* ptr = (std::vector<UriData>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    std::vector<UriData>::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new std::vector<UriData>::iterator(ptr->begin());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_io_github_ssaltedfish_aria2_cpp_UriDataVector_00024Iterator_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 29);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_UriDataVector_end(JNIEnv* env, jobject obj) {
    std::vector<UriData>* ptr = (std::vector<UriData>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    std::vector<UriData>::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new std::vector<UriData>::iterator(ptr->end());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_io_github_ssaltedfish_aria2_cpp_UriDataVector_00024Iterator_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 29);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_io_github_ssaltedfish_aria2_cpp_UriDataVector_size(JNIEnv* env, jobject obj) {
    std::vector<UriData>* ptr = (std::vector<UriData>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rval = ptr->size();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_UriDataVector_erase(JNIEnv* env, jobject obj, jobject arg0) {
    std::vector<UriData>* ptr = (std::vector<UriData>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<UriData>::iterator* ptr0 = arg0 == NULL ? NULL : (std::vector<UriData>::iterator*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    std::vector<UriData>::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new std::vector<UriData>::iterator(ptr->erase(*ptr0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_io_github_ssaltedfish_aria2_cpp_UriDataVector_00024Iterator_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 29);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_cpp_UriDataVector_insert(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    std::vector<UriData>* ptr = (std::vector<UriData>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<UriData>::iterator* ptr0 = arg0 == NULL ? NULL : (std::vector<UriData>::iterator*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    aria2::UriData* ptr1 = arg1 == NULL ? NULL : (aria2::UriData*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    std::vector<UriData>::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new std::vector<UriData>::iterator(ptr->insert(*ptr0, *ptr1));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_io_github_ssaltedfish_aria2_cpp_UriDataVector_00024Iterator_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 29);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_UriDataVector_resize(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<UriData>* ptr = (std::vector<UriData>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->resize((size_t)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_UriDataVector_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        std::vector<UriData>* rptr = new std::vector<UriData>();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_github_ssaltedfish_aria2_cpp_UriDataVector_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_cpp_UriDataVector_allocate__J(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        std::vector<UriData>* rptr = new std::vector<UriData>((size_t)arg0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_io_github_ssaltedfish_aria2_cpp_UriDataVector_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}


JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_run(JNIEnv* env, jclass cls, jobject arg0, jint arg1) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::run(ptr0, (aria2::RUN_MODE)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_shutdown__Lio_github_ssaltedfish_aria2_cpp_Session_2(JNIEnv* env, jclass cls, jobject arg0) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::shutdown(ptr0);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_shutdown__Lio_github_ssaltedfish_aria2_cpp_Session_2Z(JNIEnv* env, jclass cls, jobject arg0, jboolean arg1) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::shutdown(ptr0, (bool)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_isNull(JNIEnv* env, jclass cls, jlong arg0) {
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)aria2::isNull((aria2::A2Gid)arg0);
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_libraryDeinit(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::libraryDeinit();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_getGlobalStat(JNIEnv* env, jclass cls, jobject arg0) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    aria2::GlobalStat* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new aria2::GlobalStat(aria2::getGlobalStat(ptr0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_io_github_ssaltedfish_aria2_cpp_GlobalStat_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 23);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addMetalink__Lio_github_ssaltedfish_aria2_cpp_Session_2_3JLorg_bytedeco_javacpp_BytePointer_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2I(JNIEnv* env, jclass cls, jobject arg0, jlongArray arg1, jobject arg2, jobject arg3, jint arg4) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : env->GetLongArrayElements(arg1, NULL);
    jlong size1 = arg1 == NULL ? 0 : env->GetArrayLength(arg1);
    void* owner1 = (void*)ptr1;
    VectorAdapter< aria2::A2Gid > adapter1((aria2::A2Gid*)ptr1, size1, owner1);
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong size2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_limitFID);
    void* owner2 = JavaCPP_getPointerOwner(env, arg2);
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    size2 -= position2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addMetalink(ptr0, adapter1, (std::basic_string< char >&)adapter2, *(const aria2::KeyVals*)ptr3, arg4);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    aria2::A2Gid* rptr1 = (aria2::A2Gid*)adapter1;
    void* rowner1 = adapter1.owner;
    if (rptr1 != (aria2::A2Gid*)ptr1) {
        VectorAdapter< aria2::A2Gid >::deallocate(rowner1);
    }
    if (arg1 != NULL) env->ReleaseLongArrayElements(arg1, (jlong*)ptr1, 0);
    signed char* rptr2 = adapter2;
    jlong rsize2 = (jlong)adapter2.size;
    void* rowner2 = adapter2.owner;
    if (rptr2 != ptr2) {
        JavaCPP_initPointer(env, arg2, rptr2, rsize2, rowner2, &StringAdapter< char >::deallocate);
    } else {
        env->SetLongField(arg2, JavaCPP_limitFID, rsize2 + position2);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addMetalink__Lio_github_ssaltedfish_aria2_cpp_Session_2_3JLorg_bytedeco_javacpp_BytePointer_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2(JNIEnv* env, jclass cls, jobject arg0, jlongArray arg1, jobject arg2, jobject arg3) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : env->GetLongArrayElements(arg1, NULL);
    jlong size1 = arg1 == NULL ? 0 : env->GetArrayLength(arg1);
    void* owner1 = (void*)ptr1;
    VectorAdapter< aria2::A2Gid > adapter1((aria2::A2Gid*)ptr1, size1, owner1);
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong size2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_limitFID);
    void* owner2 = JavaCPP_getPointerOwner(env, arg2);
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    size2 -= position2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addMetalink(ptr0, adapter1, (std::basic_string< char >&)adapter2, *(const aria2::KeyVals*)ptr3);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    aria2::A2Gid* rptr1 = (aria2::A2Gid*)adapter1;
    void* rowner1 = adapter1.owner;
    if (rptr1 != (aria2::A2Gid*)ptr1) {
        VectorAdapter< aria2::A2Gid >::deallocate(rowner1);
    }
    if (arg1 != NULL) env->ReleaseLongArrayElements(arg1, (jlong*)ptr1, 0);
    signed char* rptr2 = adapter2;
    jlong rsize2 = (jlong)adapter2.size;
    void* rowner2 = adapter2.owner;
    if (rptr2 != ptr2) {
        JavaCPP_initPointer(env, arg2, rptr2, rsize2, rowner2, &StringAdapter< char >::deallocate);
    } else {
        env->SetLongField(arg2, JavaCPP_limitFID, rsize2 + position2);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addMetalink__Lio_github_ssaltedfish_aria2_cpp_Session_2Lorg_bytedeco_javacpp_LongPointer_2Ljava_lang_String_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2I(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jstring arg2, jobject arg3, jint arg4) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong size1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_limitFID);
    void* owner1 = JavaCPP_getPointerOwner(env, arg1);
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    size1 -= position1;
    VectorAdapter< aria2::A2Gid > adapter1((aria2::A2Gid*)ptr1, size1, owner1);
    const char* ptr2 = JavaCPP_getStringBytes(env, arg2);
    jlong size2 = 0;
    void* owner2 = (void*)ptr2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addMetalink(ptr0, adapter1, (std::basic_string< char >&)adapter2, *(const aria2::KeyVals*)ptr3, arg4);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    aria2::A2Gid* rptr1 = (aria2::A2Gid*)adapter1;
    jlong rsize1 = (jlong)adapter1.size;
    void* rowner1 = adapter1.owner;
    if (rptr1 != (aria2::A2Gid*)ptr1) {
        JavaCPP_initPointer(env, arg1, rptr1, rsize1, rowner1, &VectorAdapter< aria2::A2Gid >::deallocate);
    } else {
        env->SetLongField(arg1, JavaCPP_limitFID, rsize1 + position1);
    }
    JavaCPP_releaseStringBytes(env, arg2, ptr2);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addMetalink__Lio_github_ssaltedfish_aria2_cpp_Session_2Ljava_nio_LongBuffer_2Ljava_lang_String_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2I(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jstring arg2, jobject arg3, jint arg4) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)env->GetDirectBufferAddress(arg1);
    jlong size1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferLimitFID);
    void* owner1 = (void*)ptr1;
    jlongArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jlongArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetLongArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    size1 -= position1;
    VectorAdapter< aria2::A2Gid > adapter1((aria2::A2Gid*)ptr1, size1, owner1);
    const char* ptr2 = JavaCPP_getStringBytes(env, arg2);
    jlong size2 = 0;
    void* owner2 = (void*)ptr2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addMetalink(ptr0, adapter1, (std::basic_string< char >&)adapter2, *(const aria2::KeyVals*)ptr3, arg4);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    aria2::A2Gid* rptr1 = (aria2::A2Gid*)adapter1;
    void* rowner1 = adapter1.owner;
    if (rptr1 != (aria2::A2Gid*)ptr1) {
        VectorAdapter< aria2::A2Gid >::deallocate(rowner1);
    }
    if (arr1 != NULL) env->ReleaseLongArrayElements(arr1, (jlong*)(ptr1 - position1), 0);
    JavaCPP_releaseStringBytes(env, arg2, ptr2);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addMetalink__Lio_github_ssaltedfish_aria2_cpp_Session_2Ljava_nio_LongBuffer_2Ljava_lang_String_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jstring arg2, jobject arg3) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)env->GetDirectBufferAddress(arg1);
    jlong size1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferLimitFID);
    void* owner1 = (void*)ptr1;
    jlongArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jlongArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetLongArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    size1 -= position1;
    VectorAdapter< aria2::A2Gid > adapter1((aria2::A2Gid*)ptr1, size1, owner1);
    const char* ptr2 = JavaCPP_getStringBytes(env, arg2);
    jlong size2 = 0;
    void* owner2 = (void*)ptr2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addMetalink(ptr0, adapter1, (std::basic_string< char >&)adapter2, *(const aria2::KeyVals*)ptr3);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    aria2::A2Gid* rptr1 = (aria2::A2Gid*)adapter1;
    void* rowner1 = adapter1.owner;
    if (rptr1 != (aria2::A2Gid*)ptr1) {
        VectorAdapter< aria2::A2Gid >::deallocate(rowner1);
    }
    if (arr1 != NULL) env->ReleaseLongArrayElements(arr1, (jlong*)(ptr1 - position1), 0);
    JavaCPP_releaseStringBytes(env, arg2, ptr2);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addMetalink__Lio_github_ssaltedfish_aria2_cpp_Session_2_3JLjava_lang_String_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2(JNIEnv* env, jclass cls, jobject arg0, jlongArray arg1, jstring arg2, jobject arg3) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : env->GetLongArrayElements(arg1, NULL);
    jlong size1 = arg1 == NULL ? 0 : env->GetArrayLength(arg1);
    void* owner1 = (void*)ptr1;
    VectorAdapter< aria2::A2Gid > adapter1((aria2::A2Gid*)ptr1, size1, owner1);
    const char* ptr2 = JavaCPP_getStringBytes(env, arg2);
    jlong size2 = 0;
    void* owner2 = (void*)ptr2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addMetalink(ptr0, adapter1, (std::basic_string< char >&)adapter2, *(const aria2::KeyVals*)ptr3);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    aria2::A2Gid* rptr1 = (aria2::A2Gid*)adapter1;
    void* rowner1 = adapter1.owner;
    if (rptr1 != (aria2::A2Gid*)ptr1) {
        VectorAdapter< aria2::A2Gid >::deallocate(rowner1);
    }
    if (arg1 != NULL) env->ReleaseLongArrayElements(arg1, (jlong*)ptr1, 0);
    JavaCPP_releaseStringBytes(env, arg2, ptr2);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addMetalink__Lio_github_ssaltedfish_aria2_cpp_Session_2_3JLjava_lang_String_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2I(JNIEnv* env, jclass cls, jobject arg0, jlongArray arg1, jstring arg2, jobject arg3, jint arg4) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : env->GetLongArrayElements(arg1, NULL);
    jlong size1 = arg1 == NULL ? 0 : env->GetArrayLength(arg1);
    void* owner1 = (void*)ptr1;
    VectorAdapter< aria2::A2Gid > adapter1((aria2::A2Gid*)ptr1, size1, owner1);
    const char* ptr2 = JavaCPP_getStringBytes(env, arg2);
    jlong size2 = 0;
    void* owner2 = (void*)ptr2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addMetalink(ptr0, adapter1, (std::basic_string< char >&)adapter2, *(const aria2::KeyVals*)ptr3, arg4);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    aria2::A2Gid* rptr1 = (aria2::A2Gid*)adapter1;
    void* rowner1 = adapter1.owner;
    if (rptr1 != (aria2::A2Gid*)ptr1) {
        VectorAdapter< aria2::A2Gid >::deallocate(rowner1);
    }
    if (arg1 != NULL) env->ReleaseLongArrayElements(arg1, (jlong*)ptr1, 0);
    JavaCPP_releaseStringBytes(env, arg2, ptr2);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addMetalink__Lio_github_ssaltedfish_aria2_cpp_Session_2Ljava_nio_LongBuffer_2Lorg_bytedeco_javacpp_BytePointer_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)env->GetDirectBufferAddress(arg1);
    jlong size1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferLimitFID);
    void* owner1 = (void*)ptr1;
    jlongArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jlongArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetLongArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    size1 -= position1;
    VectorAdapter< aria2::A2Gid > adapter1((aria2::A2Gid*)ptr1, size1, owner1);
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong size2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_limitFID);
    void* owner2 = JavaCPP_getPointerOwner(env, arg2);
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    size2 -= position2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addMetalink(ptr0, adapter1, (std::basic_string< char >&)adapter2, *(const aria2::KeyVals*)ptr3);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    aria2::A2Gid* rptr1 = (aria2::A2Gid*)adapter1;
    void* rowner1 = adapter1.owner;
    if (rptr1 != (aria2::A2Gid*)ptr1) {
        VectorAdapter< aria2::A2Gid >::deallocate(rowner1);
    }
    if (arr1 != NULL) env->ReleaseLongArrayElements(arr1, (jlong*)(ptr1 - position1), 0);
    signed char* rptr2 = adapter2;
    jlong rsize2 = (jlong)adapter2.size;
    void* rowner2 = adapter2.owner;
    if (rptr2 != ptr2) {
        JavaCPP_initPointer(env, arg2, rptr2, rsize2, rowner2, &StringAdapter< char >::deallocate);
    } else {
        env->SetLongField(arg2, JavaCPP_limitFID, rsize2 + position2);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addMetalink__Lio_github_ssaltedfish_aria2_cpp_Session_2Ljava_nio_LongBuffer_2Lorg_bytedeco_javacpp_BytePointer_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2I(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jint arg4) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)env->GetDirectBufferAddress(arg1);
    jlong size1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferLimitFID);
    void* owner1 = (void*)ptr1;
    jlongArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jlongArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetLongArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    size1 -= position1;
    VectorAdapter< aria2::A2Gid > adapter1((aria2::A2Gid*)ptr1, size1, owner1);
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong size2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_limitFID);
    void* owner2 = JavaCPP_getPointerOwner(env, arg2);
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    size2 -= position2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addMetalink(ptr0, adapter1, (std::basic_string< char >&)adapter2, *(const aria2::KeyVals*)ptr3, arg4);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    aria2::A2Gid* rptr1 = (aria2::A2Gid*)adapter1;
    void* rowner1 = adapter1.owner;
    if (rptr1 != (aria2::A2Gid*)ptr1) {
        VectorAdapter< aria2::A2Gid >::deallocate(rowner1);
    }
    if (arr1 != NULL) env->ReleaseLongArrayElements(arr1, (jlong*)(ptr1 - position1), 0);
    signed char* rptr2 = adapter2;
    jlong rsize2 = (jlong)adapter2.size;
    void* rowner2 = adapter2.owner;
    if (rptr2 != ptr2) {
        JavaCPP_initPointer(env, arg2, rptr2, rsize2, rowner2, &StringAdapter< char >::deallocate);
    } else {
        env->SetLongField(arg2, JavaCPP_limitFID, rsize2 + position2);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addMetalink__Lio_github_ssaltedfish_aria2_cpp_Session_2Lorg_bytedeco_javacpp_LongPointer_2Ljava_lang_String_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jstring arg2, jobject arg3) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong size1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_limitFID);
    void* owner1 = JavaCPP_getPointerOwner(env, arg1);
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    size1 -= position1;
    VectorAdapter< aria2::A2Gid > adapter1((aria2::A2Gid*)ptr1, size1, owner1);
    const char* ptr2 = JavaCPP_getStringBytes(env, arg2);
    jlong size2 = 0;
    void* owner2 = (void*)ptr2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addMetalink(ptr0, adapter1, (std::basic_string< char >&)adapter2, *(const aria2::KeyVals*)ptr3);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    aria2::A2Gid* rptr1 = (aria2::A2Gid*)adapter1;
    jlong rsize1 = (jlong)adapter1.size;
    void* rowner1 = adapter1.owner;
    if (rptr1 != (aria2::A2Gid*)ptr1) {
        JavaCPP_initPointer(env, arg1, rptr1, rsize1, rowner1, &VectorAdapter< aria2::A2Gid >::deallocate);
    } else {
        env->SetLongField(arg1, JavaCPP_limitFID, rsize1 + position1);
    }
    JavaCPP_releaseStringBytes(env, arg2, ptr2);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addMetalink__Lio_github_ssaltedfish_aria2_cpp_Session_2Lorg_bytedeco_javacpp_LongPointer_2Lorg_bytedeco_javacpp_BytePointer_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong size1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_limitFID);
    void* owner1 = JavaCPP_getPointerOwner(env, arg1);
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    size1 -= position1;
    VectorAdapter< aria2::A2Gid > adapter1((aria2::A2Gid*)ptr1, size1, owner1);
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong size2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_limitFID);
    void* owner2 = JavaCPP_getPointerOwner(env, arg2);
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    size2 -= position2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addMetalink(ptr0, adapter1, (std::basic_string< char >&)adapter2, *(const aria2::KeyVals*)ptr3);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    aria2::A2Gid* rptr1 = (aria2::A2Gid*)adapter1;
    jlong rsize1 = (jlong)adapter1.size;
    void* rowner1 = adapter1.owner;
    if (rptr1 != (aria2::A2Gid*)ptr1) {
        JavaCPP_initPointer(env, arg1, rptr1, rsize1, rowner1, &VectorAdapter< aria2::A2Gid >::deallocate);
    } else {
        env->SetLongField(arg1, JavaCPP_limitFID, rsize1 + position1);
    }
    signed char* rptr2 = adapter2;
    jlong rsize2 = (jlong)adapter2.size;
    void* rowner2 = adapter2.owner;
    if (rptr2 != ptr2) {
        JavaCPP_initPointer(env, arg2, rptr2, rsize2, rowner2, &StringAdapter< char >::deallocate);
    } else {
        env->SetLongField(arg2, JavaCPP_limitFID, rsize2 + position2);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addMetalink__Lio_github_ssaltedfish_aria2_cpp_Session_2Lorg_bytedeco_javacpp_LongPointer_2Lorg_bytedeco_javacpp_BytePointer_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2I(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jint arg4) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong size1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_limitFID);
    void* owner1 = JavaCPP_getPointerOwner(env, arg1);
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    size1 -= position1;
    VectorAdapter< aria2::A2Gid > adapter1((aria2::A2Gid*)ptr1, size1, owner1);
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong size2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_limitFID);
    void* owner2 = JavaCPP_getPointerOwner(env, arg2);
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    size2 -= position2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addMetalink(ptr0, adapter1, (std::basic_string< char >&)adapter2, *(const aria2::KeyVals*)ptr3, arg4);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    aria2::A2Gid* rptr1 = (aria2::A2Gid*)adapter1;
    jlong rsize1 = (jlong)adapter1.size;
    void* rowner1 = adapter1.owner;
    if (rptr1 != (aria2::A2Gid*)ptr1) {
        JavaCPP_initPointer(env, arg1, rptr1, rsize1, rowner1, &VectorAdapter< aria2::A2Gid >::deallocate);
    } else {
        env->SetLongField(arg1, JavaCPP_limitFID, rsize1 + position1);
    }
    signed char* rptr2 = adapter2;
    jlong rsize2 = (jlong)adapter2.size;
    void* rowner2 = adapter2.owner;
    if (rptr2 != ptr2) {
        JavaCPP_initPointer(env, arg2, rptr2, rsize2, rowner2, &StringAdapter< char >::deallocate);
    } else {
        env->SetLongField(arg2, JavaCPP_limitFID, rsize2 + position2);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_pauseDownload__Lio_github_ssaltedfish_aria2_cpp_Session_2J(JNIEnv* env, jclass cls, jobject arg0, jlong arg1) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::pauseDownload(ptr0, (aria2::A2Gid)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_pauseDownload__Lio_github_ssaltedfish_aria2_cpp_Session_2JZ(JNIEnv* env, jclass cls, jobject arg0, jlong arg1, jboolean arg2) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::pauseDownload(ptr0, (aria2::A2Gid)arg1, (bool)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_sessionNew(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    std::vector<std::pair<std::string,std::string> >* ptr0 = arg0 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    aria2::SessionConfig* ptr1 = arg1 == NULL ? NULL : (aria2::SessionConfig*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    aria2::Session* rptr;
    jthrowable exc = NULL;
    try {
        rptr = aria2::sessionNew(*(const aria2::KeyVals*)ptr0, *(const aria2::SessionConfig*)ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 14);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addUri__Lio_github_ssaltedfish_aria2_cpp_Session_2Lorg_bytedeco_javacpp_LongPointer_2Lio_github_ssaltedfish_aria2_cpp_StringVector_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2I(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jint arg4) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    std::vector<std::string>* ptr2 = arg2 == NULL ? NULL : (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addUri(ptr0, (aria2::A2Gid*)ptr1, *(const std::vector<std::string>*)ptr2, *(const aria2::KeyVals*)ptr3, arg4);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addUri__Lio_github_ssaltedfish_aria2_cpp_Session_2_3JLio_github_ssaltedfish_aria2_cpp_StringVector_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2(JNIEnv* env, jclass cls, jobject arg0, jlongArray arg1, jobject arg2, jobject arg3) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : env->GetLongArrayElements(arg1, NULL);
    std::vector<std::string>* ptr2 = arg2 == NULL ? NULL : (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addUri(ptr0, (aria2::A2Gid*)ptr1, *(const std::vector<std::string>*)ptr2, *(const aria2::KeyVals*)ptr3);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (arg1 != NULL) env->ReleaseLongArrayElements(arg1, (jlong*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addUri__Lio_github_ssaltedfish_aria2_cpp_Session_2_3JLio_github_ssaltedfish_aria2_cpp_StringVector_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2I(JNIEnv* env, jclass cls, jobject arg0, jlongArray arg1, jobject arg2, jobject arg3, jint arg4) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : env->GetLongArrayElements(arg1, NULL);
    std::vector<std::string>* ptr2 = arg2 == NULL ? NULL : (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addUri(ptr0, (aria2::A2Gid*)ptr1, *(const std::vector<std::string>*)ptr2, *(const aria2::KeyVals*)ptr3, arg4);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (arg1 != NULL) env->ReleaseLongArrayElements(arg1, (jlong*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addUri__Lio_github_ssaltedfish_aria2_cpp_Session_2Ljava_nio_LongBuffer_2Lio_github_ssaltedfish_aria2_cpp_StringVector_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)env->GetDirectBufferAddress(arg1);
    jlongArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jlongArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetLongArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    std::vector<std::string>* ptr2 = arg2 == NULL ? NULL : (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addUri(ptr0, (aria2::A2Gid*)ptr1, *(const std::vector<std::string>*)ptr2, *(const aria2::KeyVals*)ptr3);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (arr1 != NULL) env->ReleaseLongArrayElements(arr1, (jlong*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addUri__Lio_github_ssaltedfish_aria2_cpp_Session_2Ljava_nio_LongBuffer_2Lio_github_ssaltedfish_aria2_cpp_StringVector_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2I(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jint arg4) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)env->GetDirectBufferAddress(arg1);
    jlongArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jlongArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetLongArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    std::vector<std::string>* ptr2 = arg2 == NULL ? NULL : (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addUri(ptr0, (aria2::A2Gid*)ptr1, *(const std::vector<std::string>*)ptr2, *(const aria2::KeyVals*)ptr3, arg4);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (arr1 != NULL) env->ReleaseLongArrayElements(arr1, (jlong*)(ptr1 - position1), 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addUri__Lio_github_ssaltedfish_aria2_cpp_Session_2Lorg_bytedeco_javacpp_LongPointer_2Lio_github_ssaltedfish_aria2_cpp_StringVector_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    std::vector<std::string>* ptr2 = arg2 == NULL ? NULL : (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addUri(ptr0, (aria2::A2Gid*)ptr1, *(const std::vector<std::string>*)ptr2, *(const aria2::KeyVals*)ptr3);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_unpauseDownload(JNIEnv* env, jclass cls, jobject arg0, jlong arg1) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::unpauseDownload(ptr0, (aria2::A2Gid)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_getGlobalOptions(JNIEnv* env, jclass cls, jobject arg0) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    aria2::KeyVals* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (aria2::KeyVals*)new aria2::KeyVals(aria2::getGlobalOptions(ptr0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_io_github_ssaltedfish_aria2_cpp_StringStingPairVector_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 18);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addTorrent__Lio_github_ssaltedfish_aria2_cpp_Session_2_3JLorg_bytedeco_javacpp_BytePointer_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2(JNIEnv* env, jclass cls, jobject arg0, jlongArray arg1, jobject arg2, jobject arg3) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : env->GetLongArrayElements(arg1, NULL);
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong size2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_limitFID);
    void* owner2 = JavaCPP_getPointerOwner(env, arg2);
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    size2 -= position2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addTorrent(ptr0, (aria2::A2Gid*)ptr1, (std::basic_string< char >&)adapter2, *(const aria2::KeyVals*)ptr3);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (arg1 != NULL) env->ReleaseLongArrayElements(arg1, (jlong*)ptr1, 0);
    signed char* rptr2 = adapter2;
    jlong rsize2 = (jlong)adapter2.size;
    void* rowner2 = adapter2.owner;
    if (rptr2 != ptr2) {
        JavaCPP_initPointer(env, arg2, rptr2, rsize2, rowner2, &StringAdapter< char >::deallocate);
    } else {
        env->SetLongField(arg2, JavaCPP_limitFID, rsize2 + position2);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addTorrent__Lio_github_ssaltedfish_aria2_cpp_Session_2Lorg_bytedeco_javacpp_LongPointer_2Ljava_lang_String_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2I(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jstring arg2, jobject arg3, jint arg4) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    const char* ptr2 = JavaCPP_getStringBytes(env, arg2);
    jlong size2 = 0;
    void* owner2 = (void*)ptr2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addTorrent(ptr0, (aria2::A2Gid*)ptr1, (std::basic_string< char >&)adapter2, *(const aria2::KeyVals*)ptr3, arg4);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    JavaCPP_releaseStringBytes(env, arg2, ptr2);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addTorrent__Lio_github_ssaltedfish_aria2_cpp_Session_2Lorg_bytedeco_javacpp_LongPointer_2Ljava_lang_String_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jstring arg2, jobject arg3) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    const char* ptr2 = JavaCPP_getStringBytes(env, arg2);
    jlong size2 = 0;
    void* owner2 = (void*)ptr2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addTorrent(ptr0, (aria2::A2Gid*)ptr1, (std::basic_string< char >&)adapter2, *(const aria2::KeyVals*)ptr3);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    JavaCPP_releaseStringBytes(env, arg2, ptr2);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addTorrent__Lio_github_ssaltedfish_aria2_cpp_Session_2_3JLorg_bytedeco_javacpp_BytePointer_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2I(JNIEnv* env, jclass cls, jobject arg0, jlongArray arg1, jobject arg2, jobject arg3, jint arg4) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : env->GetLongArrayElements(arg1, NULL);
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong size2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_limitFID);
    void* owner2 = JavaCPP_getPointerOwner(env, arg2);
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    size2 -= position2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addTorrent(ptr0, (aria2::A2Gid*)ptr1, (std::basic_string< char >&)adapter2, *(const aria2::KeyVals*)ptr3, arg4);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (arg1 != NULL) env->ReleaseLongArrayElements(arg1, (jlong*)ptr1, 0);
    signed char* rptr2 = adapter2;
    jlong rsize2 = (jlong)adapter2.size;
    void* rowner2 = adapter2.owner;
    if (rptr2 != ptr2) {
        JavaCPP_initPointer(env, arg2, rptr2, rsize2, rowner2, &StringAdapter< char >::deallocate);
    } else {
        env->SetLongField(arg2, JavaCPP_limitFID, rsize2 + position2);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addTorrent__Lio_github_ssaltedfish_aria2_cpp_Session_2Ljava_nio_LongBuffer_2Ljava_lang_String_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jstring arg2, jobject arg3) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)env->GetDirectBufferAddress(arg1);
    jlongArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jlongArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetLongArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    const char* ptr2 = JavaCPP_getStringBytes(env, arg2);
    jlong size2 = 0;
    void* owner2 = (void*)ptr2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addTorrent(ptr0, (aria2::A2Gid*)ptr1, (std::basic_string< char >&)adapter2, *(const aria2::KeyVals*)ptr3);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (arr1 != NULL) env->ReleaseLongArrayElements(arr1, (jlong*)(ptr1 - position1), 0);
    JavaCPP_releaseStringBytes(env, arg2, ptr2);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addTorrent__Lio_github_ssaltedfish_aria2_cpp_Session_2Ljava_nio_LongBuffer_2Ljava_lang_String_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2I(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jstring arg2, jobject arg3, jint arg4) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)env->GetDirectBufferAddress(arg1);
    jlongArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jlongArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetLongArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    const char* ptr2 = JavaCPP_getStringBytes(env, arg2);
    jlong size2 = 0;
    void* owner2 = (void*)ptr2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addTorrent(ptr0, (aria2::A2Gid*)ptr1, (std::basic_string< char >&)adapter2, *(const aria2::KeyVals*)ptr3, arg4);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (arr1 != NULL) env->ReleaseLongArrayElements(arr1, (jlong*)(ptr1 - position1), 0);
    JavaCPP_releaseStringBytes(env, arg2, ptr2);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addTorrent__Lio_github_ssaltedfish_aria2_cpp_Session_2Lorg_bytedeco_javacpp_LongPointer_2Ljava_lang_String_2Lio_github_ssaltedfish_aria2_cpp_StringVector_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jstring arg2, jobject arg3, jobject arg4) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    const char* ptr2 = JavaCPP_getStringBytes(env, arg2);
    jlong size2 = 0;
    void* owner2 = (void*)ptr2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::string>* ptr3 = arg3 == NULL ? NULL : (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    std::vector<std::pair<std::string,std::string> >* ptr4 = arg4 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 4 is NULL.");
        return 0;
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetLongField(arg4, JavaCPP_positionFID);
    ptr4 += position4;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addTorrent(ptr0, (aria2::A2Gid*)ptr1, (std::basic_string< char >&)adapter2, *(const std::vector<std::string>*)ptr3, *(const aria2::KeyVals*)ptr4);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    JavaCPP_releaseStringBytes(env, arg2, ptr2);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addTorrent__Lio_github_ssaltedfish_aria2_cpp_Session_2_3JLjava_lang_String_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2(JNIEnv* env, jclass cls, jobject arg0, jlongArray arg1, jstring arg2, jobject arg3) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : env->GetLongArrayElements(arg1, NULL);
    const char* ptr2 = JavaCPP_getStringBytes(env, arg2);
    jlong size2 = 0;
    void* owner2 = (void*)ptr2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addTorrent(ptr0, (aria2::A2Gid*)ptr1, (std::basic_string< char >&)adapter2, *(const aria2::KeyVals*)ptr3);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (arg1 != NULL) env->ReleaseLongArrayElements(arg1, (jlong*)ptr1, 0);
    JavaCPP_releaseStringBytes(env, arg2, ptr2);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addTorrent__Lio_github_ssaltedfish_aria2_cpp_Session_2_3JLjava_lang_String_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2I(JNIEnv* env, jclass cls, jobject arg0, jlongArray arg1, jstring arg2, jobject arg3, jint arg4) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : env->GetLongArrayElements(arg1, NULL);
    const char* ptr2 = JavaCPP_getStringBytes(env, arg2);
    jlong size2 = 0;
    void* owner2 = (void*)ptr2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addTorrent(ptr0, (aria2::A2Gid*)ptr1, (std::basic_string< char >&)adapter2, *(const aria2::KeyVals*)ptr3, arg4);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (arg1 != NULL) env->ReleaseLongArrayElements(arg1, (jlong*)ptr1, 0);
    JavaCPP_releaseStringBytes(env, arg2, ptr2);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addTorrent__Lio_github_ssaltedfish_aria2_cpp_Session_2Ljava_nio_LongBuffer_2Lorg_bytedeco_javacpp_BytePointer_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)env->GetDirectBufferAddress(arg1);
    jlongArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jlongArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetLongArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong size2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_limitFID);
    void* owner2 = JavaCPP_getPointerOwner(env, arg2);
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    size2 -= position2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addTorrent(ptr0, (aria2::A2Gid*)ptr1, (std::basic_string< char >&)adapter2, *(const aria2::KeyVals*)ptr3);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (arr1 != NULL) env->ReleaseLongArrayElements(arr1, (jlong*)(ptr1 - position1), 0);
    signed char* rptr2 = adapter2;
    jlong rsize2 = (jlong)adapter2.size;
    void* rowner2 = adapter2.owner;
    if (rptr2 != ptr2) {
        JavaCPP_initPointer(env, arg2, rptr2, rsize2, rowner2, &StringAdapter< char >::deallocate);
    } else {
        env->SetLongField(arg2, JavaCPP_limitFID, rsize2 + position2);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addTorrent__Lio_github_ssaltedfish_aria2_cpp_Session_2Ljava_nio_LongBuffer_2Lorg_bytedeco_javacpp_BytePointer_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2I(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jint arg4) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)env->GetDirectBufferAddress(arg1);
    jlongArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jlongArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetLongArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong size2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_limitFID);
    void* owner2 = JavaCPP_getPointerOwner(env, arg2);
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    size2 -= position2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addTorrent(ptr0, (aria2::A2Gid*)ptr1, (std::basic_string< char >&)adapter2, *(const aria2::KeyVals*)ptr3, arg4);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (arr1 != NULL) env->ReleaseLongArrayElements(arr1, (jlong*)(ptr1 - position1), 0);
    signed char* rptr2 = adapter2;
    jlong rsize2 = (jlong)adapter2.size;
    void* rowner2 = adapter2.owner;
    if (rptr2 != ptr2) {
        JavaCPP_initPointer(env, arg2, rptr2, rsize2, rowner2, &StringAdapter< char >::deallocate);
    } else {
        env->SetLongField(arg2, JavaCPP_limitFID, rsize2 + position2);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addTorrent__Lio_github_ssaltedfish_aria2_cpp_Session_2Ljava_nio_LongBuffer_2Ljava_lang_String_2Lio_github_ssaltedfish_aria2_cpp_StringVector_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jstring arg2, jobject arg3, jobject arg4) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)env->GetDirectBufferAddress(arg1);
    jlongArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jlongArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetLongArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    const char* ptr2 = JavaCPP_getStringBytes(env, arg2);
    jlong size2 = 0;
    void* owner2 = (void*)ptr2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::string>* ptr3 = arg3 == NULL ? NULL : (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    std::vector<std::pair<std::string,std::string> >* ptr4 = arg4 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 4 is NULL.");
        return 0;
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetLongField(arg4, JavaCPP_positionFID);
    ptr4 += position4;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addTorrent(ptr0, (aria2::A2Gid*)ptr1, (std::basic_string< char >&)adapter2, *(const std::vector<std::string>*)ptr3, *(const aria2::KeyVals*)ptr4);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (arr1 != NULL) env->ReleaseLongArrayElements(arr1, (jlong*)(ptr1 - position1), 0);
    JavaCPP_releaseStringBytes(env, arg2, ptr2);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addTorrent__Lio_github_ssaltedfish_aria2_cpp_Session_2_3JLorg_bytedeco_javacpp_BytePointer_2Lio_github_ssaltedfish_aria2_cpp_StringVector_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2I(JNIEnv* env, jclass cls, jobject arg0, jlongArray arg1, jobject arg2, jobject arg3, jobject arg4, jint arg5) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : env->GetLongArrayElements(arg1, NULL);
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong size2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_limitFID);
    void* owner2 = JavaCPP_getPointerOwner(env, arg2);
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    size2 -= position2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::string>* ptr3 = arg3 == NULL ? NULL : (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    std::vector<std::pair<std::string,std::string> >* ptr4 = arg4 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 4 is NULL.");
        return 0;
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetLongField(arg4, JavaCPP_positionFID);
    ptr4 += position4;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addTorrent(ptr0, (aria2::A2Gid*)ptr1, (std::basic_string< char >&)adapter2, *(const std::vector<std::string>*)ptr3, *(const aria2::KeyVals*)ptr4, arg5);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (arg1 != NULL) env->ReleaseLongArrayElements(arg1, (jlong*)ptr1, 0);
    signed char* rptr2 = adapter2;
    jlong rsize2 = (jlong)adapter2.size;
    void* rowner2 = adapter2.owner;
    if (rptr2 != ptr2) {
        JavaCPP_initPointer(env, arg2, rptr2, rsize2, rowner2, &StringAdapter< char >::deallocate);
    } else {
        env->SetLongField(arg2, JavaCPP_limitFID, rsize2 + position2);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addTorrent__Lio_github_ssaltedfish_aria2_cpp_Session_2_3JLorg_bytedeco_javacpp_BytePointer_2Lio_github_ssaltedfish_aria2_cpp_StringVector_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2(JNIEnv* env, jclass cls, jobject arg0, jlongArray arg1, jobject arg2, jobject arg3, jobject arg4) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : env->GetLongArrayElements(arg1, NULL);
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong size2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_limitFID);
    void* owner2 = JavaCPP_getPointerOwner(env, arg2);
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    size2 -= position2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::string>* ptr3 = arg3 == NULL ? NULL : (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    std::vector<std::pair<std::string,std::string> >* ptr4 = arg4 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 4 is NULL.");
        return 0;
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetLongField(arg4, JavaCPP_positionFID);
    ptr4 += position4;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addTorrent(ptr0, (aria2::A2Gid*)ptr1, (std::basic_string< char >&)adapter2, *(const std::vector<std::string>*)ptr3, *(const aria2::KeyVals*)ptr4);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (arg1 != NULL) env->ReleaseLongArrayElements(arg1, (jlong*)ptr1, 0);
    signed char* rptr2 = adapter2;
    jlong rsize2 = (jlong)adapter2.size;
    void* rowner2 = adapter2.owner;
    if (rptr2 != ptr2) {
        JavaCPP_initPointer(env, arg2, rptr2, rsize2, rowner2, &StringAdapter< char >::deallocate);
    } else {
        env->SetLongField(arg2, JavaCPP_limitFID, rsize2 + position2);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addTorrent__Lio_github_ssaltedfish_aria2_cpp_Session_2Lorg_bytedeco_javacpp_LongPointer_2Ljava_lang_String_2Lio_github_ssaltedfish_aria2_cpp_StringVector_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2I(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jstring arg2, jobject arg3, jobject arg4, jint arg5) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    const char* ptr2 = JavaCPP_getStringBytes(env, arg2);
    jlong size2 = 0;
    void* owner2 = (void*)ptr2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::string>* ptr3 = arg3 == NULL ? NULL : (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    std::vector<std::pair<std::string,std::string> >* ptr4 = arg4 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 4 is NULL.");
        return 0;
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetLongField(arg4, JavaCPP_positionFID);
    ptr4 += position4;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addTorrent(ptr0, (aria2::A2Gid*)ptr1, (std::basic_string< char >&)adapter2, *(const std::vector<std::string>*)ptr3, *(const aria2::KeyVals*)ptr4, arg5);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    JavaCPP_releaseStringBytes(env, arg2, ptr2);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addTorrent__Lio_github_ssaltedfish_aria2_cpp_Session_2Ljava_nio_LongBuffer_2Ljava_lang_String_2Lio_github_ssaltedfish_aria2_cpp_StringVector_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2I(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jstring arg2, jobject arg3, jobject arg4, jint arg5) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)env->GetDirectBufferAddress(arg1);
    jlongArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jlongArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetLongArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    const char* ptr2 = JavaCPP_getStringBytes(env, arg2);
    jlong size2 = 0;
    void* owner2 = (void*)ptr2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::string>* ptr3 = arg3 == NULL ? NULL : (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    std::vector<std::pair<std::string,std::string> >* ptr4 = arg4 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 4 is NULL.");
        return 0;
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetLongField(arg4, JavaCPP_positionFID);
    ptr4 += position4;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addTorrent(ptr0, (aria2::A2Gid*)ptr1, (std::basic_string< char >&)adapter2, *(const std::vector<std::string>*)ptr3, *(const aria2::KeyVals*)ptr4, arg5);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (arr1 != NULL) env->ReleaseLongArrayElements(arr1, (jlong*)(ptr1 - position1), 0);
    JavaCPP_releaseStringBytes(env, arg2, ptr2);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addTorrent__Lio_github_ssaltedfish_aria2_cpp_Session_2Lorg_bytedeco_javacpp_LongPointer_2Lorg_bytedeco_javacpp_BytePointer_2Lio_github_ssaltedfish_aria2_cpp_StringVector_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jobject arg4) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong size2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_limitFID);
    void* owner2 = JavaCPP_getPointerOwner(env, arg2);
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    size2 -= position2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::string>* ptr3 = arg3 == NULL ? NULL : (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    std::vector<std::pair<std::string,std::string> >* ptr4 = arg4 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 4 is NULL.");
        return 0;
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetLongField(arg4, JavaCPP_positionFID);
    ptr4 += position4;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addTorrent(ptr0, (aria2::A2Gid*)ptr1, (std::basic_string< char >&)adapter2, *(const std::vector<std::string>*)ptr3, *(const aria2::KeyVals*)ptr4);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    signed char* rptr2 = adapter2;
    jlong rsize2 = (jlong)adapter2.size;
    void* rowner2 = adapter2.owner;
    if (rptr2 != ptr2) {
        JavaCPP_initPointer(env, arg2, rptr2, rsize2, rowner2, &StringAdapter< char >::deallocate);
    } else {
        env->SetLongField(arg2, JavaCPP_limitFID, rsize2 + position2);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addTorrent__Lio_github_ssaltedfish_aria2_cpp_Session_2Lorg_bytedeco_javacpp_LongPointer_2Lorg_bytedeco_javacpp_BytePointer_2Lio_github_ssaltedfish_aria2_cpp_StringVector_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2I(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jobject arg4, jint arg5) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong size2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_limitFID);
    void* owner2 = JavaCPP_getPointerOwner(env, arg2);
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    size2 -= position2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::string>* ptr3 = arg3 == NULL ? NULL : (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    std::vector<std::pair<std::string,std::string> >* ptr4 = arg4 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 4 is NULL.");
        return 0;
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetLongField(arg4, JavaCPP_positionFID);
    ptr4 += position4;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addTorrent(ptr0, (aria2::A2Gid*)ptr1, (std::basic_string< char >&)adapter2, *(const std::vector<std::string>*)ptr3, *(const aria2::KeyVals*)ptr4, arg5);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    signed char* rptr2 = adapter2;
    jlong rsize2 = (jlong)adapter2.size;
    void* rowner2 = adapter2.owner;
    if (rptr2 != ptr2) {
        JavaCPP_initPointer(env, arg2, rptr2, rsize2, rowner2, &StringAdapter< char >::deallocate);
    } else {
        env->SetLongField(arg2, JavaCPP_limitFID, rsize2 + position2);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addTorrent__Lio_github_ssaltedfish_aria2_cpp_Session_2Lorg_bytedeco_javacpp_LongPointer_2Lorg_bytedeco_javacpp_BytePointer_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2I(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jint arg4) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong size2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_limitFID);
    void* owner2 = JavaCPP_getPointerOwner(env, arg2);
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    size2 -= position2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addTorrent(ptr0, (aria2::A2Gid*)ptr1, (std::basic_string< char >&)adapter2, *(const aria2::KeyVals*)ptr3, arg4);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    signed char* rptr2 = adapter2;
    jlong rsize2 = (jlong)adapter2.size;
    void* rowner2 = adapter2.owner;
    if (rptr2 != ptr2) {
        JavaCPP_initPointer(env, arg2, rptr2, rsize2, rowner2, &StringAdapter< char >::deallocate);
    } else {
        env->SetLongField(arg2, JavaCPP_limitFID, rsize2 + position2);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addTorrent__Lio_github_ssaltedfish_aria2_cpp_Session_2_3JLjava_lang_String_2Lio_github_ssaltedfish_aria2_cpp_StringVector_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2(JNIEnv* env, jclass cls, jobject arg0, jlongArray arg1, jstring arg2, jobject arg3, jobject arg4) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : env->GetLongArrayElements(arg1, NULL);
    const char* ptr2 = JavaCPP_getStringBytes(env, arg2);
    jlong size2 = 0;
    void* owner2 = (void*)ptr2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::string>* ptr3 = arg3 == NULL ? NULL : (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    std::vector<std::pair<std::string,std::string> >* ptr4 = arg4 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 4 is NULL.");
        return 0;
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetLongField(arg4, JavaCPP_positionFID);
    ptr4 += position4;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addTorrent(ptr0, (aria2::A2Gid*)ptr1, (std::basic_string< char >&)adapter2, *(const std::vector<std::string>*)ptr3, *(const aria2::KeyVals*)ptr4);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (arg1 != NULL) env->ReleaseLongArrayElements(arg1, (jlong*)ptr1, 0);
    JavaCPP_releaseStringBytes(env, arg2, ptr2);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addTorrent__Lio_github_ssaltedfish_aria2_cpp_Session_2Lorg_bytedeco_javacpp_LongPointer_2Lorg_bytedeco_javacpp_BytePointer_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong size2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_limitFID);
    void* owner2 = JavaCPP_getPointerOwner(env, arg2);
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    size2 -= position2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::pair<std::string,std::string> >* ptr3 = arg3 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addTorrent(ptr0, (aria2::A2Gid*)ptr1, (std::basic_string< char >&)adapter2, *(const aria2::KeyVals*)ptr3);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    signed char* rptr2 = adapter2;
    jlong rsize2 = (jlong)adapter2.size;
    void* rowner2 = adapter2.owner;
    if (rptr2 != ptr2) {
        JavaCPP_initPointer(env, arg2, rptr2, rsize2, rowner2, &StringAdapter< char >::deallocate);
    } else {
        env->SetLongField(arg2, JavaCPP_limitFID, rsize2 + position2);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addTorrent__Lio_github_ssaltedfish_aria2_cpp_Session_2Ljava_nio_LongBuffer_2Lorg_bytedeco_javacpp_BytePointer_2Lio_github_ssaltedfish_aria2_cpp_StringVector_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jobject arg4) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)env->GetDirectBufferAddress(arg1);
    jlongArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jlongArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetLongArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong size2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_limitFID);
    void* owner2 = JavaCPP_getPointerOwner(env, arg2);
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    size2 -= position2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::string>* ptr3 = arg3 == NULL ? NULL : (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    std::vector<std::pair<std::string,std::string> >* ptr4 = arg4 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 4 is NULL.");
        return 0;
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetLongField(arg4, JavaCPP_positionFID);
    ptr4 += position4;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addTorrent(ptr0, (aria2::A2Gid*)ptr1, (std::basic_string< char >&)adapter2, *(const std::vector<std::string>*)ptr3, *(const aria2::KeyVals*)ptr4);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (arr1 != NULL) env->ReleaseLongArrayElements(arr1, (jlong*)(ptr1 - position1), 0);
    signed char* rptr2 = adapter2;
    jlong rsize2 = (jlong)adapter2.size;
    void* rowner2 = adapter2.owner;
    if (rptr2 != ptr2) {
        JavaCPP_initPointer(env, arg2, rptr2, rsize2, rowner2, &StringAdapter< char >::deallocate);
    } else {
        env->SetLongField(arg2, JavaCPP_limitFID, rsize2 + position2);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addTorrent__Lio_github_ssaltedfish_aria2_cpp_Session_2Ljava_nio_LongBuffer_2Lorg_bytedeco_javacpp_BytePointer_2Lio_github_ssaltedfish_aria2_cpp_StringVector_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2I(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jobject arg4, jint arg5) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)env->GetDirectBufferAddress(arg1);
    jlongArray arr1 = NULL;
    jlong offset1 = 0;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jlongArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        offset1 = env->CallIntMethod(arg1, JavaCPP_arrayOffsetMID);
        if (env->ExceptionOccurred() != NULL) {
            return 0;
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetLongArrayElements(arr1, NULL) + offset1;
        }
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_bufferPositionFID);
    ptr1 += position1;
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong size2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_limitFID);
    void* owner2 = JavaCPP_getPointerOwner(env, arg2);
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    size2 -= position2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::string>* ptr3 = arg3 == NULL ? NULL : (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    std::vector<std::pair<std::string,std::string> >* ptr4 = arg4 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 4 is NULL.");
        return 0;
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetLongField(arg4, JavaCPP_positionFID);
    ptr4 += position4;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addTorrent(ptr0, (aria2::A2Gid*)ptr1, (std::basic_string< char >&)adapter2, *(const std::vector<std::string>*)ptr3, *(const aria2::KeyVals*)ptr4, arg5);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (arr1 != NULL) env->ReleaseLongArrayElements(arr1, (jlong*)(ptr1 - position1), 0);
    signed char* rptr2 = adapter2;
    jlong rsize2 = (jlong)adapter2.size;
    void* rowner2 = adapter2.owner;
    if (rptr2 != ptr2) {
        JavaCPP_initPointer(env, arg2, rptr2, rsize2, rowner2, &StringAdapter< char >::deallocate);
    } else {
        env->SetLongField(arg2, JavaCPP_limitFID, rsize2 + position2);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_addTorrent__Lio_github_ssaltedfish_aria2_cpp_Session_2_3JLjava_lang_String_2Lio_github_ssaltedfish_aria2_cpp_StringVector_2Lio_github_ssaltedfish_aria2_cpp_StringStingPairVector_2I(JNIEnv* env, jclass cls, jobject arg0, jlongArray arg1, jstring arg2, jobject arg3, jobject arg4, jint arg5) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong* ptr1 = arg1 == NULL ? NULL : env->GetLongArrayElements(arg1, NULL);
    const char* ptr2 = JavaCPP_getStringBytes(env, arg2);
    jlong size2 = 0;
    void* owner2 = (void*)ptr2;
    StringAdapter< char > adapter2(ptr2, size2, owner2);
    std::vector<std::string>* ptr3 = arg3 == NULL ? NULL : (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 3 is NULL.");
        return 0;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    std::vector<std::pair<std::string,std::string> >* ptr4 = arg4 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 4 is NULL.");
        return 0;
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetLongField(arg4, JavaCPP_positionFID);
    ptr4 += position4;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::addTorrent(ptr0, (aria2::A2Gid*)ptr1, (std::basic_string< char >&)adapter2, *(const std::vector<std::string>*)ptr3, *(const aria2::KeyVals*)ptr4, arg5);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (arg1 != NULL) env->ReleaseLongArrayElements(arg1, (jlong*)ptr1, 0);
    JavaCPP_releaseStringBytes(env, arg2, ptr2);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_gidToHex(JNIEnv* env, jclass cls, jlong arg0) {
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter< char > radapter(aria2::gidToHex((aria2::A2Gid)arg0));
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = rowner != NULL ? &StringAdapter< char >::deallocate : 0;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 11);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_getGlobalOption__Lio_github_ssaltedfish_aria2_cpp_Session_2Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong size1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_limitFID);
    void* owner1 = JavaCPP_getPointerOwner(env, arg1);
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    size1 -= position1;
    StringAdapter< char > adapter1(ptr1, size1, owner1);
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter< char > radapter(aria2::getGlobalOption(ptr0, (std::basic_string< char >&)adapter1));
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = rowner != NULL ? &StringAdapter< char >::deallocate : 0;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 11);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    signed char* rptr1 = adapter1;
    jlong rsize1 = (jlong)adapter1.size;
    void* rowner1 = adapter1.owner;
    if (rptr1 != ptr1) {
        JavaCPP_initPointer(env, arg1, rptr1, rsize1, rowner1, &StringAdapter< char >::deallocate);
    } else {
        env->SetLongField(arg1, JavaCPP_limitFID, rsize1 + position1);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jstring JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_getGlobalOption__Lio_github_ssaltedfish_aria2_cpp_Session_2Ljava_lang_String_2(JNIEnv* env, jclass cls, jobject arg0, jstring arg1) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    const char* ptr1 = JavaCPP_getStringBytes(env, arg1);
    jlong size1 = 0;
    void* owner1 = (void*)ptr1;
    StringAdapter< char > adapter1(ptr1, size1, owner1);
    jstring rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter< char > radapter(aria2::getGlobalOption(ptr0, (std::basic_string< char >&)adapter1));
        rptr = radapter;
        if (rptr != NULL) {
            rarg = JavaCPP_createStringFromBytes(env, rptr, radapter.size);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    JavaCPP_releaseStringBytes(env, arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_removeDownload__Lio_github_ssaltedfish_aria2_cpp_Session_2J(JNIEnv* env, jclass cls, jobject arg0, jlong arg1) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::removeDownload(ptr0, (aria2::A2Gid)arg1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_removeDownload__Lio_github_ssaltedfish_aria2_cpp_Session_2JZ(JNIEnv* env, jclass cls, jobject arg0, jlong arg1, jboolean arg2) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::removeDownload(ptr0, (aria2::A2Gid)arg1, (bool)arg2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_changePosition(JNIEnv* env, jclass cls, jobject arg0, jlong arg1, jint arg2, jint arg3) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::changePosition(ptr0, (aria2::A2Gid)arg1, arg2, (aria2::OffsetMode)arg3);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_changeGlobalOption(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    std::vector<std::pair<std::string,std::string> >* ptr1 = arg1 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::changeGlobalOption(ptr0, *(const aria2::KeyVals*)ptr1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_libraryInit(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::libraryInit();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_getActiveDownload(JNIEnv* env, jclass cls, jobject arg0) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    aria2::A2Gid* rptr;
    jthrowable exc = NULL;
    try {
        VectorAdapter< aria2::A2Gid > radapter(aria2::getActiveDownload(ptr0));
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = rowner != NULL ? &VectorAdapter< aria2::A2Gid >::deallocate : 0;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 19);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_hexToGid__Ljava_lang_String_2(JNIEnv* env, jclass cls, jstring arg0) {
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jlong size0 = 0;
    void* owner0 = (void*)ptr0;
    StringAdapter< char > adapter0(ptr0, size0, owner0);
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        aria2::A2Gid rval = (aria2::A2Gid)aria2::hexToGid((std::basic_string< char >&)adapter0);
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_hexToGid__Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jclass cls, jobject arg0) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter< char > adapter0(ptr0, size0, owner0);
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        aria2::A2Gid rval = (aria2::A2Gid)aria2::hexToGid((std::basic_string< char >&)adapter0);
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    signed char* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter< char >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_getDownloadHandle(JNIEnv* env, jclass cls, jobject arg0, jlong arg1) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    aria2::DownloadHandle* rptr;
    jthrowable exc = NULL;
    try {
        rptr = aria2::getDownloadHandle(ptr0, (aria2::A2Gid)arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_sessionFinal(JNIEnv* env, jclass cls, jobject arg0) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::sessionFinal(ptr0);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_changeOption(JNIEnv* env, jclass cls, jobject arg0, jlong arg1, jobject arg2) {
    aria2::Session* ptr0 = arg0 == NULL ? NULL : (aria2::Session*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    std::vector<std::pair<std::string,std::string> >* ptr2 = arg2 == NULL ? NULL : (std::vector<std::pair<std::string,std::string> >*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 7), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = aria2::changeOption(ptr0, (aria2::A2Gid)arg1, *(const aria2::KeyVals*)ptr2);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_io_github_ssaltedfish_aria2_global_Aria2_deleteDownloadHandle(JNIEnv* env, jclass cls, jobject arg0) {
    aria2::DownloadHandle* ptr0 = arg0 == NULL ? NULL : (aria2::DownloadHandle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        aria2::deleteDownloadHandle(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 8);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

}

