// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package io.github.ssaltedfish.aria2.cpp;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static io.github.ssaltedfish.aria2.global.Aria2.*;


/**
 * \struct
 *
 * This object contains information of file to download.
 */
@Namespace("aria2") @Properties(inherit = io.github.ssaltedfish.aria2.prest.Aria2.class)
public class FileData extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public FileData() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public FileData(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FileData(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public FileData position(long position) {
        return (FileData)super.position(position);
    }
    @Override public FileData getPointer(long i) {
        return new FileData((Pointer)this).offsetAddress(i);
    }

  /**
   * 1-based index of the file in the download. This is the same order
   * with the files in multi-file torrent. This index is used to get
   * this object using :func:{@code DownloadHandle::getFile()} function.
   */
  public native int index(); public native FileData index(int setter);
  /**
   * The local file path to this file when downloaded.
   */
  public native @StdString BytePointer path(); public native FileData path(BytePointer setter);
  /**
   * The file size in bytes. This is not the current size of the local
   * file.
   */
  public native @Cast("int64_t") long length(); public native FileData length(long setter);
  /**
   * The completed length of this file in bytes. Please note that it
   * is possible that sum of |completedLength| is less than the return
   * value of :func:{@code DownloadHandle::getCompletedLength()}
   * function. This is because the |completedLength| only calculates
   * completed pieces. On the other hand,
   * :func:{@code DownloadHandle::getCompletedLength()} takes into account
   * of partially completed piece.
   */
  public native @Cast("int64_t") long completedLength(); public native FileData completedLength(long setter);
  /**
   * true if this file is selected by {@code }select-file{@code } option. If
   * {@code }select-file{@code } is not specified or this is single torrent or no
   * torrent download, this value is always true.
   */
  public native @Cast("bool") boolean selected(); public native FileData selected(boolean setter);
  /**
   * Returns the list of URI for this file.
   */
  public native @StdVector UriData uris(); public native FileData uris(UriData setter);
}
