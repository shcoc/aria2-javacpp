// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package io.github.ssaltedfish.aria2.global;

import io.github.ssaltedfish.aria2.cpp.*;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

public class Aria2 extends io.github.ssaltedfish.aria2.prest.Aria2 {
    static { Loader.load(); }

// Targeting ..\cpp\StringVector.java


// Targeting ..\cpp\StringStingPairVector.java


// Targeting ..\cpp\A2GidVector.java


// Targeting ..\cpp\FileDataVector.java


// Targeting ..\cpp\UriDataVector.java


// Targeting ..\cpp\StringVectorVector.java


// Targeting ..\cpp\StringStingPair.java


// Parsed from aria2/aria2.h

/* <!-- copyright */
/*
 * aria2 - The high speed download utility
 *
 * Copyright (C) 2013 Tatsuhiro Tsujikawa
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 *
 * In addition, as a special exception, the copyright holders give
 * permission to link the code of portions of this program with the
 * OpenSSL library under certain conditions as described in each
 * individual source file, and distribute linked combinations
 * including the two.
 * You must obey the GNU General Public License in all respects
 * for all of the code used other than OpenSSL.  If you modify
 * file(s) with this exception, you may extend this exception to your
 * version of the file(s), but you are not obligated to do so.  If you
 * do not wish to do so, delete this exception statement from your
 * version.  If you delete this exception statement from all source
 * files in the program, then also delete it here.
 */
/* copyright --> */
// #ifndef ARIA2_H
// #define ARIA2_H

// #include <stdlib.h>
// #include <stdint.h>
// #include <sys/types.h>

// #include <string>
// #include <vector>

// Libaria2: The aim of this library is provide same functionality
// available in RPC methods. The function signatures are not
// necessarily the same, because we can take advantage of the direct,
// no latency, access to the aria2 core.
//
// Therefore, this library is not meant to be the fine-grained,
// customizable, complete HTTP/FTP/BitTorrent library. If you are
// looking for such library for HTTP/FTP access, consider libcurl.
// Targeting ..\cpp\Session.java



/**
 * \function
 *
 * Initializes the global data. It also initializes underlying
 * libraries libaria2 depends on. This function returns 0 if it
 * succeeds, or negative error code.
 *
 * Call this function only once before calling any other API
 * functions.
 */
@Namespace("aria2") public static native int libraryInit();

/**
 * \function
 *
 * Releases the global data. This function returns 0 if it succeeds,
 * or negative error code.
 *
 * Call this function only once at the end of the application.
 */
@Namespace("aria2") public static native int libraryDeinit();

/**
 * \typedef
 *
 * The type of GID, persistent identifier of each download.
 */

/**
 * \typedef
 *
 * The type of Key/Value pairs.
 */

/**
 * \enum
 *
 * Download event constants
 */
@Namespace("aria2") public enum DownloadEvent {
  /**
   * Indicating download has started.
   */
  EVENT_ON_DOWNLOAD_START(1),
  /**
   * Indicating download has paused.
   */
  EVENT_ON_DOWNLOAD_PAUSE(2),
  /**
   * Indicating download has stopped.
   */
  EVENT_ON_DOWNLOAD_STOP(3),
  /**
   * Indicating download has completed.
   */
  EVENT_ON_DOWNLOAD_COMPLETE(4),
  /**
   * Indicating download has stopped because of the error.
   */
  EVENT_ON_DOWNLOAD_ERROR(5),
  /**
   * Indicating BitTorrent download has completed, but it may still
   * continue to perform seeding.
   */
  EVENT_ON_BT_DOWNLOAD_COMPLETE(6);

    public final int value;
    private DownloadEvent(int v) { this.value = v; }
    private DownloadEvent(DownloadEvent e) { this.value = e.value; }
    public DownloadEvent intern() { for (DownloadEvent e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}
// Targeting ..\cpp\DownloadEventCallback.java


// Targeting ..\cpp\SessionConfig.java



/**
 * \function
 *
 * Creates new Session object using the |options| as additional
 * parameters. The |options| is treated as if they are specified in
 * command-line to :manpage:{@code aria2c(1)}. This function returns the
 * pointer to the created Session object if it succeeds, or {@code }NULL{@code }.
 *
 * Please note that only one Session object can be created per
 * process.
 */
@Namespace("aria2") public static native Session sessionNew(@Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options, @Const @ByRef SessionConfig config);

/**
 * \function
 *
 * Performs post-download action, including saving sessions etc and
 * destroys the |session| object, releasing the allocated resources
 * for it. This function returns the last error code and it is the
 * equivalent to the :ref:{@code exit-status} of :manpage:{@code aria2c(1)}.
 */
@Namespace("aria2") public static native int sessionFinal(Session session);

/**
 * \enum
 *
 * Execution mode for :func:{@code run()}
 */
@Name("aria2::RUN_MODE") public enum RunMode {
  /**
   * :func:{@code run()} returns when no downloads are left.
   */
  RUN_DEFAULT(0),
  /**
   * :func:{@code run()} returns after one event polling.
   */
  RUN_ONCE(1);

    public final int value;
    private RunMode(int v) { this.value = v; }
    private RunMode(RunMode e) { this.value = e.value; }
    public RunMode intern() { for (RunMode e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

/**
 * \function
 *
 * Performs event polling and actions for them. If the |mode| is
 * :c:macro:{@code RUN_DEFAULT}, this function returns when no downloads are
 * left to be processed. In this case, this function returns 0.
 *
 * If the |mode| is :c:macro:{@code RUN_ONCE}, this function returns after
 * one event polling. In the current implementation, event polling
 * timeouts in 1 second. This function also returns on each
 * timeout. On return, when no downloads are left to be processed,
 * this function returns 0. Otherwise, returns 1, indicating that the
 * caller must call this function one or more time to complete
 * downloads.
 *
 * In either case, this function returns negative error code on error.
 */
@Namespace("aria2") public static native int run(Session session, RunMode mode);

/**
 * \function
 *
 * Returns textual representation of the |gid|.
 */
@Namespace("aria2") public static native @StdString BytePointer gidToHex(@Cast("aria2::A2Gid") long gid);

/**
 * \function
 *
 * Returns GID converted from the textual representation |hex|.
 */
@Namespace("aria2") public static native @Cast("aria2::A2Gid") long hexToGid(@StdString BytePointer hex);
@Namespace("aria2") public static native @Cast("aria2::A2Gid") long hexToGid(@StdString String hex);

/**
 * \function
 *
 * Returns true if the |gid| is invalid.
 */
@Namespace("aria2") public static native @Cast("bool") boolean isNull(@Cast("aria2::A2Gid") long gid);

/**
 * \function
 *
 * Adds new HTTP(S)/FTP/BitTorrent Magnet URI.  On successful return,
 * if the |gid| is not {@code }NULL{@code }, the GID of added download will be
 * assigned to the |*gid|.  The |uris| includes URI to be downloaded.
 * For BitTorrent Magnet URI, the |uris| must have only one element
 * and it should be BitTorrent Magnet URI. URIs in the |uris| must
 * point to the same file. If you mix other URIs which point to
 * another file, aria2 does not complain but download may fail. The
 * |options| is an array of a pair of option name and value. If
 * unknown options are included in |options|, they are simply
 * ignored. If the |position| is not negative integer, the new
 * download is inserted at position in the waiting queue. If the
 * |position| is negative or the |position| is larger than the size of
 * the queue, it is appended at the end of the queue.  This function
 * returns 0 if it succeeds, or negative error code.
 */
@Namespace("aria2") public static native int addUri(Session session, @Cast("aria2::A2Gid*") LongPointer gid, @Const @ByRef StringVector uris,
           @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options, int _position/*=-1*/);
@Namespace("aria2") public static native int addUri(Session session, @Cast("aria2::A2Gid*") LongPointer gid, @Const @ByRef StringVector uris,
           @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options);
@Namespace("aria2") public static native int addUri(Session session, @Cast("aria2::A2Gid*") LongBuffer gid, @Const @ByRef StringVector uris,
           @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options, int _position/*=-1*/);
@Namespace("aria2") public static native int addUri(Session session, @Cast("aria2::A2Gid*") LongBuffer gid, @Const @ByRef StringVector uris,
           @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options);
@Namespace("aria2") public static native int addUri(Session session, @Cast("aria2::A2Gid*") long[] gid, @Const @ByRef StringVector uris,
           @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options, int _position/*=-1*/);
@Namespace("aria2") public static native int addUri(Session session, @Cast("aria2::A2Gid*") long[] gid, @Const @ByRef StringVector uris,
           @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options);

/**
 * \function
 *
 * Adds Metalink download. The path to Metalink file is specified by
 * the |metalinkFile|.  On successful return, if the |gids| is not
 * {@code }NULL{@code }, the GIDs of added downloads are appended to the
 * |*gids|. The |options| is an array of a pair of option name and
 * value. If unknown options are included in |options|, they are
 * simply ignored. If the |position| is not negative integer, the new
 * download is inserted at position in the waiting queue. If the
 * |position| is negative or the |position| is larger than the size of
 * the queue, it is appended at the end of the queue. This function
 * returns 0 if it succeeds, or negative error code.
 */
@Namespace("aria2") public static native int addMetalink(Session session, @Cast("aria2::A2Gid*") @StdVector LongPointer gids,
                @StdString BytePointer metalinkFile, @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options,
                int _position/*=-1*/);
@Namespace("aria2") public static native int addMetalink(Session session, @Cast("aria2::A2Gid*") @StdVector LongPointer gids,
                @StdString BytePointer metalinkFile, @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options);
@Namespace("aria2") public static native int addMetalink(Session session, @Cast("aria2::A2Gid*") @StdVector LongBuffer gids,
                @StdString String metalinkFile, @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options,
                int _position/*=-1*/);
@Namespace("aria2") public static native int addMetalink(Session session, @Cast("aria2::A2Gid*") @StdVector LongBuffer gids,
                @StdString String metalinkFile, @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options);
@Namespace("aria2") public static native int addMetalink(Session session, @Cast("aria2::A2Gid*") @StdVector long[] gids,
                @StdString BytePointer metalinkFile, @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options,
                int _position/*=-1*/);
@Namespace("aria2") public static native int addMetalink(Session session, @Cast("aria2::A2Gid*") @StdVector long[] gids,
                @StdString BytePointer metalinkFile, @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options);
@Namespace("aria2") public static native int addMetalink(Session session, @Cast("aria2::A2Gid*") @StdVector LongPointer gids,
                @StdString String metalinkFile, @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options,
                int _position/*=-1*/);
@Namespace("aria2") public static native int addMetalink(Session session, @Cast("aria2::A2Gid*") @StdVector LongPointer gids,
                @StdString String metalinkFile, @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options);
@Namespace("aria2") public static native int addMetalink(Session session, @Cast("aria2::A2Gid*") @StdVector LongBuffer gids,
                @StdString BytePointer metalinkFile, @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options,
                int _position/*=-1*/);
@Namespace("aria2") public static native int addMetalink(Session session, @Cast("aria2::A2Gid*") @StdVector LongBuffer gids,
                @StdString BytePointer metalinkFile, @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options);
@Namespace("aria2") public static native int addMetalink(Session session, @Cast("aria2::A2Gid*") @StdVector long[] gids,
                @StdString String metalinkFile, @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options,
                int _position/*=-1*/);
@Namespace("aria2") public static native int addMetalink(Session session, @Cast("aria2::A2Gid*") @StdVector long[] gids,
                @StdString String metalinkFile, @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options);

/**
 * \function
 *
 * Adds BitTorrent download. On successful return, if the |gid| is not
 * {@code }NULL{@code }, the GID of added download will be assigned to the
 * |*gid|. The path to ".torrent" file is specified by the
 * |torrentFile|. BitTorrent Magnet URI cannot be used with this
 * function. Use :func:{@code addUri()} instead. The |webSeedUris| contains
 * URIs used for Web-seeding. For single file torrents, URI can be a
 * complete URI pointing to the resource or if URI ends with /, name
 * in torrent file is added. For multi-file torrents, name and path in
 * torrent are added to form a URI for each file. The |options| is an
 * array of a pair of option name and value.  If unknown options are
 * included in |options|, they are simply ignored. If the |position|
 * is not negative integer, the new download is inserted at position
 * in the waiting queue. If the |position| is negative or the
 * |position| is larger than the size of the queue, it is appended at
 * the end of the queue.
 *
 * This function returns 0 if it succeeds, or negative error code.
 *
 */
@Namespace("aria2") public static native int addTorrent(Session session, @Cast("aria2::A2Gid*") LongPointer gid, @StdString BytePointer torrentFile,
               @Const @ByRef StringVector webSeedUris,
               @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options, int _position/*=-1*/);
@Namespace("aria2") public static native int addTorrent(Session session, @Cast("aria2::A2Gid*") LongPointer gid, @StdString BytePointer torrentFile,
               @Const @ByRef StringVector webSeedUris,
               @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options);
@Namespace("aria2") public static native int addTorrent(Session session, @Cast("aria2::A2Gid*") LongBuffer gid, @StdString String torrentFile,
               @Const @ByRef StringVector webSeedUris,
               @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options, int _position/*=-1*/);
@Namespace("aria2") public static native int addTorrent(Session session, @Cast("aria2::A2Gid*") LongBuffer gid, @StdString String torrentFile,
               @Const @ByRef StringVector webSeedUris,
               @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options);
@Namespace("aria2") public static native int addTorrent(Session session, @Cast("aria2::A2Gid*") long[] gid, @StdString BytePointer torrentFile,
               @Const @ByRef StringVector webSeedUris,
               @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options, int _position/*=-1*/);
@Namespace("aria2") public static native int addTorrent(Session session, @Cast("aria2::A2Gid*") long[] gid, @StdString BytePointer torrentFile,
               @Const @ByRef StringVector webSeedUris,
               @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options);
@Namespace("aria2") public static native int addTorrent(Session session, @Cast("aria2::A2Gid*") LongPointer gid, @StdString String torrentFile,
               @Const @ByRef StringVector webSeedUris,
               @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options, int _position/*=-1*/);
@Namespace("aria2") public static native int addTorrent(Session session, @Cast("aria2::A2Gid*") LongPointer gid, @StdString String torrentFile,
               @Const @ByRef StringVector webSeedUris,
               @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options);
@Namespace("aria2") public static native int addTorrent(Session session, @Cast("aria2::A2Gid*") LongBuffer gid, @StdString BytePointer torrentFile,
               @Const @ByRef StringVector webSeedUris,
               @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options, int _position/*=-1*/);
@Namespace("aria2") public static native int addTorrent(Session session, @Cast("aria2::A2Gid*") LongBuffer gid, @StdString BytePointer torrentFile,
               @Const @ByRef StringVector webSeedUris,
               @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options);
@Namespace("aria2") public static native int addTorrent(Session session, @Cast("aria2::A2Gid*") long[] gid, @StdString String torrentFile,
               @Const @ByRef StringVector webSeedUris,
               @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options, int _position/*=-1*/);
@Namespace("aria2") public static native int addTorrent(Session session, @Cast("aria2::A2Gid*") long[] gid, @StdString String torrentFile,
               @Const @ByRef StringVector webSeedUris,
               @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options);

/**
 * \function
 *
 * Same as :func:{@code addTorrent()} with an empty vector as the
 * |webSeedUris|.
 */
@Namespace("aria2") public static native int addTorrent(Session session, @Cast("aria2::A2Gid*") LongPointer gid, @StdString BytePointer torrentFile,
               @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options, int _position/*=-1*/);
@Namespace("aria2") public static native int addTorrent(Session session, @Cast("aria2::A2Gid*") LongPointer gid, @StdString BytePointer torrentFile,
               @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options);
@Namespace("aria2") public static native int addTorrent(Session session, @Cast("aria2::A2Gid*") LongBuffer gid, @StdString String torrentFile,
               @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options, int _position/*=-1*/);
@Namespace("aria2") public static native int addTorrent(Session session, @Cast("aria2::A2Gid*") LongBuffer gid, @StdString String torrentFile,
               @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options);
@Namespace("aria2") public static native int addTorrent(Session session, @Cast("aria2::A2Gid*") long[] gid, @StdString BytePointer torrentFile,
               @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options, int _position/*=-1*/);
@Namespace("aria2") public static native int addTorrent(Session session, @Cast("aria2::A2Gid*") long[] gid, @StdString BytePointer torrentFile,
               @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options);
@Namespace("aria2") public static native int addTorrent(Session session, @Cast("aria2::A2Gid*") LongPointer gid, @StdString String torrentFile,
               @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options, int _position/*=-1*/);
@Namespace("aria2") public static native int addTorrent(Session session, @Cast("aria2::A2Gid*") LongPointer gid, @StdString String torrentFile,
               @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options);
@Namespace("aria2") public static native int addTorrent(Session session, @Cast("aria2::A2Gid*") LongBuffer gid, @StdString BytePointer torrentFile,
               @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options, int _position/*=-1*/);
@Namespace("aria2") public static native int addTorrent(Session session, @Cast("aria2::A2Gid*") LongBuffer gid, @StdString BytePointer torrentFile,
               @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options);
@Namespace("aria2") public static native int addTorrent(Session session, @Cast("aria2::A2Gid*") long[] gid, @StdString String torrentFile,
               @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options, int _position/*=-1*/);
@Namespace("aria2") public static native int addTorrent(Session session, @Cast("aria2::A2Gid*") long[] gid, @StdString String torrentFile,
               @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options);

/**
 * \function
 *
 * Returns the array of active download GID.
 */
@Namespace("aria2") public static native @Cast("aria2::A2Gid*") @StdVector LongPointer getActiveDownload(Session session);

/**
 * \function
 *
 * Removes the download denoted by the |gid|. If the specified
 * download is in progress, it is stopped at first. The status of
 * removed download becomes :c:macro:{@code DOWNLOAD_REMOVED}. If the
 * |force| is true, removal will take place without any action which
 * takes time such as contacting BitTorrent tracker. This function
 * returns 0 if it succeeds, or negative error code.
 */
@Namespace("aria2") public static native int removeDownload(Session session, @Cast("aria2::A2Gid") long gid, @Cast("bool") boolean force/*=false*/);
@Namespace("aria2") public static native int removeDownload(Session session, @Cast("aria2::A2Gid") long gid);

/**
 * \function
 *
 * Pauses the download denoted by the |gid|. The status of paused
 * download becomes :c:macro:{@code DOWNLOAD_PAUSED}. If the download is
 * active, the download is placed on the first position of waiting
 * queue. As long as the status is :c:macro:{@code DOWNLOAD_PAUSED}, the
 * download will not start. To change status to
 * :c:macro:{@code DOWNLOAD_WAITING}, use :func:{@code unpauseDownload()}
 * function.  If the |force| is true, pause will take place without
 * any action which takes time such as contacting BitTorrent
 * tracker. This function returns 0 if it succeeds, or negative error
 * code.
 *
 * Please note that, to make pause work, the application must set
 * :member:{@code SessionConfig::keepRunning} to true. Otherwise, the
 * behavior is undefined.
 */
@Namespace("aria2") public static native int pauseDownload(Session session, @Cast("aria2::A2Gid") long gid, @Cast("bool") boolean force/*=false*/);
@Namespace("aria2") public static native int pauseDownload(Session session, @Cast("aria2::A2Gid") long gid);

/**
 * \function
 *
 * Changes the status of the download denoted by the |gid| from
 * :c:macro:{@code DOWNLOAD_PAUSED} to :c:macro:{@code DOWNLOAD_WAITING}. This
 * makes the download eligible to restart. This function returns 0 if
 * it succeeds, or negative error code.
 */
@Namespace("aria2") public static native int unpauseDownload(Session session, @Cast("aria2::A2Gid") long gid);

/**
 * \function
 *
 * Apply options in the |options| to the download denoted by the |gid|
 * dynamically. The following options can be changed for downloads in
 * :c:macro:{@code DOWNLOAD_ACTIVE} status:
 *
 * * :option:{@code bt-max-peers <--bt-max-peers>}
 * * :option:{@code bt-request-peer-speed-limit <--bt-request-peer-speed-limit>}
 * * :option:{@code bt-remove-unselected-file <--bt-remove-unselected-file>}
 * * :option:{@code force-save <--force-save>}
 * * :option:{@code max-download-limit <--max-download-limit>}
 * * :option:{@code max-upload-limit <-u>}
 *
 * For downloads in :c:macro:{@code DOWNLOAD_WAITING} or
 * :c:macro:{@code DOWNLOAD_PAUSED} status, in addition to the above
 * options, options listed in :ref:{@code input-file} subsection are available,
 * except for following options:
 * :option:{@code dry-run <--dry-run>},
 * :option:{@code metalink-base-uri <--metalink-base-uri>},
 * :option:{@code parameterized-uri <-P>},
 * :option:{@code pause <--pause>},
 * :option:{@code piece-length <--piece-length>} and
 * :option:{@code rpc-save-upload-metadata <--rpc-save-upload-metadata>} option.
 *
 * The options which are not applicable or unknown, they are just
 * ignored.
 *
 * This function returns 0 if it succeeds, or negative error code.
 */
@Namespace("aria2") public static native int changeOption(Session session, @Cast("aria2::A2Gid") long gid, @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options);

/**
 * \function
 *
 * Returns global option denoted by the |name|. If such option is not
 * available, returns empty string.
 */
@Namespace("aria2") public static native @StdString BytePointer getGlobalOption(Session session, @StdString BytePointer name);
@Namespace("aria2") public static native @StdString String getGlobalOption(Session session, @StdString String name);

/**
 * \function
 *
 * Returns global options. Note that this function does not return
 * options which have no default value and have not been set by
 * :func:{@code sessionNew()}, configuration files or API functions.
 */
@Namespace("aria2") public static native @ByVal @Cast("aria2::KeyVals*") StringStingPairVector getGlobalOptions(Session session);

/**
 * \function
 *
 * Apply global options in the |options| dynamically.  The following
 * options are available:
 *
 * * :option:{@code download-result <--download-result>}
 * * :option:{@code log <-l>}
 * * :option:{@code log-level <--log-level>}
 * * :option:{@code max-concurrent-downloads <-j>}
 * * :option:{@code max-download-result <--max-download-result>}
 * * :option:{@code max-overall-download-limit <--max-overall-download-limit>}
 * * :option:{@code max-overall-upload-limit <--max-overall-upload-limit>}
 * * :option:{@code save-cookies <--save-cookies>}
 * * :option:{@code save-session <--save-session>}
 * * :option:{@code server-stat-of <--server-stat-of>}
 *
 * In addition to them, options listed in :ref:{@code input-file} subsection
 * are available, except for following options:
 * :option:{@code checksum <--checksum>},
 * :option:{@code index-out <-O>},
 * :option:{@code out <-o>},
 * :option:{@code pause <--pause>} and
 * :option:{@code select-file <--select-file>}.
 *
 * The options which are not applicable or unknown, they are just
 * ignored.
 *
 * This function returns 0 if it succeeds, or negative error code.
 */
@Namespace("aria2") public static native int changeGlobalOption(Session session, @Cast("const aria2::KeyVals*") @ByRef StringStingPairVector options);
// Targeting ..\cpp\GlobalStat.java



/**
 * \function
 *
 * Returns global statistics such as overall download and upload
 * speed.
 */
@Namespace("aria2") public static native @ByVal GlobalStat getGlobalStat(Session session);

/**
 * \enum
 *
 * Constants how to re-position a download.
 */
@Namespace("aria2") public enum OffsetMode {
  /**
   * Moves the download to a position relative to the beginning of the
   * queue.
   */
  OFFSET_MODE_SET(0),
  /**
   * Moves the download to a position relative to the current
   * position.
   */
  OFFSET_MODE_CUR(1),
  /**
   * Moves the download to a position relative to the end of the
   * queue.
   */
  OFFSET_MODE_END(2);

    public final int value;
    private OffsetMode(int v) { this.value = v; }
    private OffsetMode(OffsetMode e) { this.value = e.value; }
    public OffsetMode intern() { for (OffsetMode e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

/**
 * \function
 *
 * Changes the position of the download denoted by the |gid|. if it is
 * in :c:macro:{@code DOWNLOAD_WAITING} or :c:macro:{@code DOWNLOAD_PAUSED} state.
 * If the |how| is :c:macro:{@code OFFSET_MODE_SET}, it moves the download
 * to a position |pos| relative to the beginning of the queue. If the
 * |how| is :c:macro:{@code OFFSET_MODE_CUR}, it moves the download to a
 * position |pos| relative to the current position. If the |how| is
 * :c:macro:{@code OFFSET_MODE_END}, it moves the download to a position
 * |pos| relative to the end of the queue. If the destination position
 * is less than 0 or beyond the end of the queue, it moves the
 * download to the beginning or the end of the queue respectively. The
 * response is the destination position on success.
 *
 * For example, if the download having GID gid is placed in position
 * 3, {@code }changePosition(gid, -1, OFFSET_MODE_CUR){@code } will change its
 * position to 2. Additional call {@code }changePosition(gid, 0,
 * OFFSET_MODE_SET){@code } will change its position to 0 (the beginning of
 * the queue).
 *
 * This function returns the final destination position of this
 * download, or negative error code.
 */
@Namespace("aria2") public static native int changePosition(Session session, @Cast("aria2::A2Gid") long gid, int pos, OffsetMode how);

/**
 * \function
 *
 * Schedules shutdown. If the |force| is true, shutdown will take
 * place without any action which takes time such as contacting
 * BitTorrent tracker. After this call, the application must keep
 * calling :func:{@code run()} function until it returns 0.  This function
 * returns 0 if it succeeds, or negative error code.
 */
@Namespace("aria2") public static native int shutdown(Session session, @Cast("bool") boolean force/*=false*/);
@Namespace("aria2") public static native int shutdown(Session session);

/**
 * \enum
 *
 * The status of URI.
 */
@Namespace("aria2") public enum UriStatus {
  /**
   * Indicating the URI has been used.
   */
  URI_USED(0),
  /**
   * Indicating the URI has not been used.
   */
  URI_WAITING(1);

    public final int value;
    private UriStatus(int v) { this.value = v; }
    private UriStatus(UriStatus e) { this.value = e.value; }
    public UriStatus intern() { for (UriStatus e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}
// Targeting ..\cpp\UriData.java


// Targeting ..\cpp\FileData.java



/**
 * \enum
 *
 * BitTorrent file mode
 */
@Namespace("aria2") public enum BtFileMode {
  /**
   * Indicating no mode. This value is used when file mode is not
   * available.
   */
  BT_FILE_MODE_NONE(0),
  /**
   * Indicating single file torrent
   */
  BT_FILE_MODE_SINGLE(1),
  /**
   * Indicating multi file torrent
   */
  BT_FILE_MODE_MULTI(2);

    public final int value;
    private BtFileMode(int v) { this.value = v; }
    private BtFileMode(BtFileMode e) { this.value = e.value; }
    public BtFileMode intern() { for (BtFileMode e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}
// Targeting ..\cpp\BtMetaInfoData.java



/**
 * \enum
 *
 * The status of download item.
 */
@Namespace("aria2") public enum DownloadStatus {
  /**
   * Indicating currently downloading/seeding.
   */
  DOWNLOAD_ACTIVE(0),
  /**
   * Indicating in the queue; download is not started.
   */
  DOWNLOAD_WAITING(1),
  /**
   * Indicating the download is paused.
   */
  DOWNLOAD_PAUSED(2),
  /**
   * Indicating stopped and completed download.
   */
  DOWNLOAD_COMPLETE(3),
  /**
   * Indicating stopped download because of error.
   */
  DOWNLOAD_ERROR(4),
  /**
   * Indicating removed by user's discretion.
   */
  DOWNLOAD_REMOVED(5);

    public final int value;
    private DownloadStatus(int v) { this.value = v; }
    private DownloadStatus(DownloadStatus e) { this.value = e.value; }
    public DownloadStatus intern() { for (DownloadStatus e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}
// Targeting ..\cpp\DownloadHandle.java



/**
 * \function
 *
 * Returns handle for the download denoted by the |gid|. The caller
 * can retrieve various information of the download via returned
 * handle's member functions. The lifetime of the returned handle is
 * before the next call of :func:{@code run()} or
 * :func:{@code sessionFinal()}. The caller must call
 * :func:{@code deleteDownloadHandle()} before that. This function returns
 * {@code }NULL{@code } if no download denoted by the |gid| is present. It is the
 * responsibility of the caller to call :func:{@code deleteDownloadHandle()}
 * to delete handle object.
 */
@Namespace("aria2") public static native DownloadHandle getDownloadHandle(Session session, @Cast("aria2::A2Gid") long gid);

/**
 * \function
 *
 * Deallocates the |dh|. Calling this function with {@code }NULL{@code } is safe.
 */
@Namespace("aria2") public static native void deleteDownloadHandle(DownloadHandle dh);

 // namespace aria2

// #endif // ARIA2_H


}
