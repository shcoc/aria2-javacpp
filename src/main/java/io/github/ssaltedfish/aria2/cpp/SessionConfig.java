// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package io.github.ssaltedfish.aria2.cpp;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static io.github.ssaltedfish.aria2.global.Aria2.*;


/**
 * \struct
 *
 * The configuration for the session.
 */
@Namespace("aria2") @NoOffset @Properties(inherit = io.github.ssaltedfish.aria2.prest.Aria2.class)
public class SessionConfig extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SessionConfig(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SessionConfig(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public SessionConfig position(long position) {
        return (SessionConfig)super.position(position);
    }
    @Override public SessionConfig getPointer(long i) {
        return new SessionConfig((Pointer)this).offsetAddress(i);
    }

  /**
   * The constructor fills default values for all members.
   */
  public SessionConfig() { super((Pointer)null); allocate(); }
  private native void allocate();
  /**
   * If the |keepRunning| member is true, {@code }run(session, RUN_ONCE){@code }
   * will return 1 even if there are no download to perform. The
   * behavior is very similar to RPC server, except that this option
   * does not enable RPC functionality. To stop aria2, use
   * :func:{@code shutdown()} function.  The default value is false.
   */
  public native @Cast("bool") boolean keepRunning(); public native SessionConfig keepRunning(boolean setter);
  /**
   * If the |useSignalHandler| is true, the library setups following
   * signal handlers in :func:{@code sessionNew()}. These signal handlers
   * are removed in :func:{@code sessionFinal()}. The default value is
   * true. If the application sets this member to false, it must
   * handle these signals and ensure that run() is repeatedly called
   * until it returns 0 and :func:{@code sessionFinal()} is called after
   * that. Failing these steps will lead to not saving .aria2 control
   * file and no session serialization.
   *
   * {@code }SIGPIPE{@code }, {@code }SIGCHLD{@code }:
   *   ignored
   * {@code }SIGHUP{@code }, {@code }SIGTERM{@code }:
   *   handled like shutdown(session, true) is called.
   * {@code }SIGINT{@code }:
   *   handled like shutdown(session, false) is called.
   */
  public native @Cast("bool") boolean useSignalHandler(); public native SessionConfig useSignalHandler(boolean setter);
  /**
   * Specify the callback function which will be invoked when download
   * event occurred. See :type:{@code DownloadEvent} about the download
   * event. The default value is {@code }NULL{@code }.
   */
  public native DownloadEventCallback downloadEventCallback(); public native SessionConfig downloadEventCallback(DownloadEventCallback setter);
  /**
   * Pointer to user defined data. libaria2 treats this as opaque
   * pointer and will not free it. The default value is {@code }NULL{@code }.
   */
  public native Pointer userData(); public native SessionConfig userData(Pointer setter);
}
